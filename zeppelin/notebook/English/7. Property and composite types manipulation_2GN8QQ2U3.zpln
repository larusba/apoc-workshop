{
  "paragraphs": [
    {
      "text": "%md\n\n# Collection and map functions\n\n\u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/data-structures/collection-list-functions/\" target\u003d\"_blank\"\u003eHere\u003c/a\u003e is the list of all collection functions.\n\nLet\u0027s see some examples:",
      "user": "anonymous",
      "dateUpdated": "2021-11-08 22:30:19.978",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eCollection and map functions\u003c/h1\u003e\n\u003cp\u003e\u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/data-structures/collection-list-functions/\" target\u003d\"_blank\"\u003eHere\u003c/a\u003e is the list of all collection functions.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s see some examples:\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349487755_663980320",
      "id": "paragraph_1635349487755_663980320",
      "dateCreated": "2021-10-27 15:44:47.756",
      "dateStarted": "2021-11-07 15:18:07.641",
      "dateFinished": "2021-11-07 15:18:07.653",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nRETURN apoc.coll.sum([1,2,3,4,5]) AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:10:12.312",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "output": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "output\n15.0\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509218886_1080836149",
      "id": "paragraph_1635509218886_1080836149",
      "dateCreated": "2021-10-29 12:06:58.887",
      "dateStarted": "2021-10-29 12:08:51.184",
      "dateFinished": "2021-10-29 12:08:51.693",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nRETURN apoc.coll.intersection([1,2,3,4,5], [3,4,5]) AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:10:19.846",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "output": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "output\n[3,4,5]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509250859_2058648590",
      "id": "paragraph_1635509250859_2058648590",
      "dateCreated": "2021-10-29 12:07:30.860",
      "dateStarted": "2021-10-29 12:08:51.807",
      "dateFinished": "2021-10-29 12:08:51.971",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nRETURN apoc.coll.shuffle([1,3,5,7,9]) AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:10:25.446",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 114.006,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "output": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "output\n[5,3,9,1,7]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509267603_1766584627",
      "id": "paragraph_1635509267603_1766584627",
      "dateCreated": "2021-10-29 12:07:47.603",
      "dateStarted": "2021-10-29 12:10:25.473",
      "dateFinished": "2021-10-29 12:10:25.499",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\n// get a random node\nmatch (n) RETURN apoc.coll.randomItem(collect(n)) AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-11-02 23:43:36.725",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 134.006,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "name": "string",
                      "born": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":38,\"data\":{\"name\":\"Renee Zellweger\",\"born\":1969},\"label\":\"Person\"}],\"edges\":[],\"labels\":{\"Movie\":\"#6621E1\",\"Person\":\"#387194\"},\"types\":[\"ACTED_IN\",\"REVIEWED\",\"PRODUCED\",\"WROTE\",\"FOLLOWS\",\"DIRECTED\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509285098_1819157902",
      "id": "paragraph_1635509285098_1819157902",
      "dateCreated": "2021-10-29 12:08:05.098",
      "dateStarted": "2021-10-29 12:11:13.633",
      "dateFinished": "2021-10-29 12:11:13.698",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Map function\n\nHere is a list of the map function availables:\n\n- `apoc.map.flatten(map,delimiter:\".\")`\n- `apoc.map.fromNodes(label, property)`\n- `apoc.map.fromPairs([[key,value],[key2,value2],...])`\n- `apoc.map.fromLists([keys],[values])`\n- `apoc.map.fromValues([key,value,key1,value1])`\n- `apoc.map.merge({first},{second})`\n- `apoc.map.mergeList([{maps}])`\n- `apoc.map.setKey(map,key,value)`\n- `apoc.map.removeKey(map,key,{recursive:true/false})`\n- `apoc.map.removeKeys(map,[keys],{recursive:true/false})`\n- `apoc.map.clean(map,[keys],[values])`\n- `apoc.map.groupBy([maps/nodes/relationships],\u0027key\u0027)`\n- `apoc.map.groupByMulti([maps/nodes/relationships],\u0027key\u0027)`\n- `apoc.map.sortedProperties(map, ignoreCase:true)`\n- `apoc.map.updateTree(tree,key,[[value,{data}]])`\n- `apoc.map.values(map, [key1,key2,key3,...],[addNullsForMissing])`\n- `apoc.map.submap(map,keys,[[defaults]],[fail\u003dtrue])`\n- `apoc.map.mget(map,keys,[[defaults]],[fail\u003dtrue])`\n- `apoc.map.get(map,key,[default],[fail\u003dtrue])`",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:24:20.015",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509480064_1011363535",
      "id": "paragraph_1635509480064_1011363535",
      "dateCreated": "2021-10-29 12:11:20.064",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\n// convert 2 list (first list representing keys, second list representig values) in maps.\nRETURN apoc.map.fromLists([\"name\", \"dob\"], [\"Cristiano Ronaldo\", date(\"1985-02-05\")]) AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:26:22.224",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 104.006,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "output.name": "string",
                      "output.dob": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "Failed to invoke function `apoc.map.fromLists`: Caused by: java.lang.RuntimeException: keys and values lists have to be not null and of same size"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509532909_971464630",
      "id": "paragraph_1635509532909_971464630",
      "dateCreated": "2021-10-29 12:12:12.909",
      "dateStarted": "2021-11-09 08:25:12.786",
      "dateFinished": "2021-11-09 08:25:12.926",
      "status": "ERROR"
    },
    {
      "text": "%neo4j\n\nRETURN apoc.map.merge({name: \"Cristiano Ronaldo\", dob: date(\"1985-02-05\")}, {country: \"Portugal\"}) AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:26:24.948",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509615873_1036558899",
      "id": "paragraph_1635509615873_1036558899",
      "dateCreated": "2021-10-29 12:13:35.873",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\nRETURN apoc.map.groupBy([\n\t{name: \"Cristiano Ronaldo\", club: \"Juventus\"},\n    {name: \"Lionel Messi\", club: \"Barcelona\"},\n    {name: \"Aaron Ramsey\", club: \"Juventus\"},\n    {name: \"Luiz Suarez\", club: \"Barcelona\"}\n], \"club\") AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:14:01.530",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509639889_588550444",
      "id": "paragraph_1635509639889_588550444",
      "dateCreated": "2021-10-29 12:13:59.889",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\nWITH {name:\"Cristiano Ronaldo\",country:\"Portugal\",dob:date(\"1985-02-05\")} AS map\nRETURN apoc.map.sortedProperties(map) AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:14:20.556",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635509642996_603828793",
      "id": "paragraph_1635509642996_603828793",
      "dateCreated": "2021-10-29 12:14:02.996",
      "status": "READY"
    },
    {
      "text": "%md\n\n## Text Functions\n\n\u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/misc/text-functions/\" target\u003d\"_blank\"\u003eHere\u003c/a\u003e is the list of all Apoc text functions.\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:48:07.469",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eText Functions\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/misc/text-functions/\" target\u003d\"_blank\"\u003eHere\u003c/a\u003e is the list of all Apoc text functions.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349483128_1944019862",
      "id": "paragraph_1635349483128_1944019862",
      "dateCreated": "2021-10-27 15:44:43.128",
      "dateStarted": "2021-11-09 08:48:07.470",
      "dateFinished": "2021-11-09 08:48:07.500",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\n// apoc.text.regexGroups(text, regex) - returns an array containing a nested array for each match. The inner array contains all match groups.\n\nRETURN apoc.text.regexGroups(\u0027abc \u003clink xxx1\u003eyyy1\u003c/link\u003e def \u003clink xxx2\u003eyyy2\u003c/link\u003e\u0027, \u0027\u003clink (\\\\w+)\u003e(\\\\w+)\u003c/link\u003e\u0027) AS result",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:29:19.300",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "result": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "result\n[[\"\u003clink xxx1\u003eyyy1\u003c/link\u003e\",\"xxx1\",\"yyy1\"],[\"\u003clink xxx2\u003eyyy2\u003c/link\u003e\",\"xxx2\",\"yyy2\"]]\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635929463924_1652386274",
      "id": "paragraph_1635929463924_1652386274",
      "dateCreated": "2021-11-03 08:51:03.924",
      "dateStarted": "2021-11-09 08:28:52.415",
      "dateFinished": "2021-11-09 08:28:52.563",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nRETURN apoc.text.snakeCase(\"test Snake Case\")",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 09:14:03.174",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "apoc.text.snakeCase(\"test Snake Case\")": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "apoc.text.snakeCase(\"test Snake Case\")\n\"test-snake-case\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635929316180_1022830283",
      "id": "paragraph_1635929316180_1022830283",
      "dateCreated": "2021-11-03 08:48:36.180",
      "dateStarted": "2021-11-03 08:48:39.464",
      "dateFinished": "2021-11-03 08:48:39.522",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nRETURN apoc.text.toUpperCase(\"test upper case\")",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 08:48:31.064",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 94.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "apoc.text.toUpperCase(\"test upper case\")": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "apoc.text.toUpperCase(\"test upper case\")\n\"TEST_UPPER_CASE\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635929298323_387798574",
      "id": "paragraph_1635929298323_387798574",
      "dateCreated": "2021-11-03 08:48:18.323",
      "dateStarted": "2021-11-03 08:48:26.062",
      "dateFinished": "2021-11-03 08:48:26.114",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n// | Pattern | Description\n//| A-Z | A-Z in uppercase\n//| a-z | A-Z in lowercase\n//| 0-9 | Numbers 0-9 inclusive\nRETURN apoc.text.random(10, \"A-Z0-9.$\")",
      "user": "anonymous",
      "dateUpdated": "2021-11-07 15:18:24.588",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 134.006,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "apoc.text.random(10, \"A-Z0-9.$\")": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "apoc.text.random(10, \"A-Z0-9.$\")\n\"82241L$QBY\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635929249112_198078275",
      "id": "paragraph_1635929249112_198078275",
      "dateCreated": "2021-11-03 08:47:29.112",
      "dateStarted": "2021-11-03 08:47:53.747",
      "dateFinished": "2021-11-03 08:47:53.765",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nRETURN apoc.text.base64UrlEncode(\"http://neo4j.com/?test\u003dtest\")",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 08:41:49.049",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "apoc.text.base64UrlEncode(\"http://neo4j.com/?test\u003dtest\")": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "apoc.text.base64UrlEncode(\"http://neo4j.com/?test\u003dtest\")\n\"aHR0cDovL25lbzRqLmNvbS8_dGVzdD10ZXN0\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635927214543_164452942",
      "id": "paragraph_1635927214543_164452942",
      "dateCreated": "2021-11-03 08:13:34.545",
      "dateStarted": "2021-11-03 08:41:49.068",
      "dateFinished": "2021-11-03 08:41:49.368",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nRETURN apoc.text.base64UrlDecode(\"aHR0cDovL25lbzRqLmNvbS8_dGVzdD10ZXN0\")",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 08:44:43.934",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "apoc.text.base64UrlDecode(\"aHR0cDovL25lbzRqLmNvbS8_dGVzdD10ZXN0\")": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "apoc.text.base64UrlDecode(\"aHR0cDovL25lbzRqLmNvbS8_dGVzdD10ZXN0\")\n\"http://neo4j.com/?test\u003dtest\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635928351596_93292989",
      "id": "paragraph_1635928351596_93292989",
      "dateCreated": "2021-11-03 08:32:31.596",
      "dateStarted": "2021-11-03 08:42:05.593",
      "dateFinished": "2021-11-03 08:42:05.611",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Other examples\n\n`RETURN apoc.text.replace(\u0027Hello World!\u0027, \u0027[^a-zA-Z]\u0027, \u0027\u0027)`  ||  return \u0027HelloWorld\u0027\n\n\n\nFormat the string with the params given, and optional param language (\u0027it\u0027 in this case)\n`RETURN apoc.text.format(\u0027ab%s %d %.1f %s%n\u0027,[\u0027cd\u0027,42,3.14,true]) AS value` || returns \u0027abcd 42 3.1 true\u0027\n`RETURN apoc.text.format(\u0027ab%s %d %.1f %s%n\u0027,[\u0027cd\u0027,42,3.14,true],\u0027it\u0027) AS value` || returns abcd 42 3,1 true\n\n\n`RETURN apoc.text.indexOf(\u0027Hello World!\u0027, \u0027World\u0027)` || returns 6\n\n\nThe `indexesOf` function, provides all occurrences of the given lookup string within the text, or empty list if not found.\nIt can optionally take `from` (inclusive) and `to` (exclusive) parameters.\n\nThe `indexesOf` function, provides all occurrences of the given lookup string within the text, or empty list if not found.\n`RETURN apoc.text.indexesOf(\u0027Hello World!\u0027, \u0027o\u0027,2,9)` || returns [4,7]\n\n\n`RETURN apoc.text.replace(\u0027Hello World!\u0027, \u0027[^a-zA-Z]\u0027, \u0027\u0027)` || returns \u0027HelloWorld\u0027\n\n\n`RETURN apoc.text.split(\u0027Hello   World\u0027, \u0027 +\u0027)` || splits with the given regular expression and returns [\u0027Hello\u0027, \u0027World\u0027]\n\n`RETURN apoc.text.join([\u0027Hello\u0027, \u0027World\u0027], \u0027 \u0027)` || returns \u0027Hello World\u0027\n\n\n`RETURN apoc.text.clean(\u0027Hello World!\u0027)` || return \u0027helloworld\u0027\n\n\n`RETURN apoc.text.compareCleaned(\u0027Hello World!\u0027, \u0027_hello-world_\u0027)` || return `true`\n\n`RETURN apoc.text.capitalize(\"neo4j\")` || returns \"Neo4j\"\n\n`RETURN apoc.text.capitalizeAll(\"graph database\")` || returns \"Graph Database\"\n\n`RETURN apoc.text.decapitalize(\"Graph Database\")` || returns \"graph Database\"\n\n`RETURN apoc.text.decapitalizeAll(\"Graph Databases\")` || returns \"graph databases\"\n\n`RETURN apoc.text.swapCase(\"Neo4j\")` || returns \"nEO4J\"\n\n`RETURN apoc.text.camelCase(\"FOO_BAR\")`   || returns \"fooBar\"",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:51:33.093",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eOther examples\u003c/h3\u003e\n\u003cp\u003eRETURN apoc.text.replace(\u0026lsquo;Hello World!\u0026rsquo;, \u0026lsquo;[^a-zA-Z]\u0026rsquo;, \u0027\u0027) -\u0026gt; return \u0026lsquo;HelloWorld\u0026rsquo;\u003c/p\u003e\n\u003cp\u003eFormat the string with the params given, and optional param language.\u003cbr /\u003e\nRETURN apoc.text.format(\u0026lsquo;ab%s %d %.1f %s%n\u0026rsquo;,[\u0026lsquo;cd\u0026rsquo;,42,3.14,true]) AS value // without language param (\u0026lsquo;en\u0026rsquo; default) return \u0026lsquo;abcd 42 3.1 true\u0026rsquo;\u003cbr /\u003e\nRETURN apoc.text.format(\u0026lsquo;ab%s %d %.1f %s%n\u0026rsquo;,[\u0026lsquo;cd\u0026rsquo;,42,3.14,true],\u0026lsquo;it\u0026rsquo;) AS value // abcd 42 3,1 true\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.indexOf(\u0026lsquo;Hello World!\u0026rsquo;, \u0026lsquo;World\u0026rsquo;) // 6\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eindexesOf\u003c/code\u003e function, provides all occurrences of the given lookup string within the text, or empty list if not found.\u003cbr /\u003e\nIt can optionally take \u003ccode\u003efrom\u003c/code\u003e (inclusive) and \u003ccode\u003eto\u003c/code\u003e (exclusive) parameters.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eindexesOf\u003c/code\u003e function, provides all occurrences of the given lookup string within the text, or empty list if not found.\u003cbr /\u003e\nRETURN apoc.text.indexesOf(\u0026lsquo;Hello World!\u0026rsquo;, \u0026lsquo;o\u0026rsquo;,2,9) // [4,7]\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.replace(\u0026lsquo;Hello World!\u0026rsquo;, \u0026lsquo;[^a-zA-Z]\u0026rsquo;, \u0027\u0027) .will return \u0026lsquo;HelloWorld\u0026rsquo;\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.split(\u0026lsquo;Hello   World\u0026rsquo;, \u0026rsquo; +\u0026rsquo;) .will split with the given regular expression return [\u0026lsquo;Hello\u0026rsquo;, \u0026lsquo;World\u0026rsquo;]\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.join([\u0026lsquo;Hello\u0026rsquo;, \u0026lsquo;World\u0026rsquo;], \u0026rsquo; \u0026rsquo;) .will return \u0026lsquo;Hello World\u0026rsquo;\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.clean(\u0026lsquo;Hello World!\u0026rsquo;) .will return \u0026lsquo;helloworld\u0026rsquo;\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.compareCleaned(\u0026lsquo;Hello World!\u0026rsquo;, \u0026lsquo;\u003cem\u003ehello-world\u003c/em\u003e\u0026rsquo;) will return \u003ccode\u003etrue\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.capitalize(\u0026ldquo;neo4j\u0026rdquo;) // \u0026ldquo;Neo4j\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.capitalizeAll(\u0026ldquo;graph database\u0026rdquo;) // \u0026ldquo;Graph Database\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.decapitalize(\u0026ldquo;Graph Database\u0026rdquo;) // \u0026ldquo;graph Database\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.decapitalizeAll(\u0026ldquo;Graph Databases\u0026rdquo;) // \u0026ldquo;graph databases\u0026rdquo;\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.swapCase(\u0026ldquo;Neo4j\u0026rdquo;) // nEO4J\u003c/p\u003e\n\u003cp\u003eRETURN apoc.text.camelCase(\u0026ldquo;FOO_BAR\u0026rdquo;);    // \u0026ldquo;fooBar\u0026rdquo;\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635930016248_1420921282",
      "id": "paragraph_1635930016248_1420921282",
      "dateCreated": "2021-11-03 09:00:16.248",
      "dateStarted": "2021-11-09 08:48:30.740",
      "dateFinished": "2021-11-09 08:48:30.771",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Hashing Functions\n\n- apoc.util.sha1([values]) /apoc.util.md5([values])  - computes the sha1 / md5 of the concatenation of all string values of the list",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:51:54.220",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eHashing Functions\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eapoc.util.sha1([values]) /apoc.util.md5([values])  - computes the sha1 / md5 of the concatenation of all string values of the list\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635928539685_813935914",
      "id": "paragraph_1635928539685_813935914",
      "dateCreated": "2021-11-03 08:35:39.685",
      "dateStarted": "2021-11-09 08:51:54.218",
      "dateFinished": "2021-11-09 08:51:54.231",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nRETURN apoc.util.sha1([\"ASD\", \"ZXC\"]) AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:52:14.946",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "output": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "output\n\"3d66263062512dd289132628bd9be7bdfda41fe7\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635928489871_264661887",
      "id": "paragraph_1635928489871_264661887",
      "dateCreated": "2021-11-03 08:34:49.871",
      "dateStarted": "2021-11-09 08:52:14.969",
      "dateFinished": "2021-11-09 08:52:15.027",
      "status": "FINISHED"
    },
    {
      "text": "%md\n- apoc.data.url(\u0027url\u0027) as {protocol,user,host,port,path,query,file,anchor} - turn URL into map structure\n- apoc.data.email(\u0027email_address\u0027) as {personal,user,domain} - extract the personal name, user and domain as a map",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:52:25.610",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cul\u003e\n\u003cli\u003eapoc.data.url(\u0026lsquo;url\u0026rsquo;) as {protocol,user,host,port,path,query,file,anchor} - turn URL into map structure\u003c/li\u003e\n\u003cli\u003eapoc.data.email(\u0026lsquo;email_address\u0026rsquo;) as {personal,user,domain} - extract the personal name, user and domain as a map\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635929132917_1044838267",
      "id": "paragraph_1635929132917_1044838267",
      "dateCreated": "2021-11-03 08:45:32.917",
      "dateStarted": "2021-11-03 08:46:52.884",
      "dateFinished": "2021-11-03 08:46:52.898",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nwith \"https://user:secret@localhost:666/path/to/file.html?x\u003d1#b\" as url\nreturn apoc.data.url(url)",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 08:32:27.297",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 144.006,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "apoc.data.url(url).path": "string",
                      "apoc.data.url(url).protocol": "string",
                      "apoc.data.url(url).file": "string",
                      "apoc.data.url(url).port": "string",
                      "apoc.data.url(url).query": "string",
                      "apoc.data.url(url).anchor": "string",
                      "apoc.data.url(url).host": "string",
                      "apoc.data.url(url).user": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "apoc.data.url(url).path\tapoc.data.url(url).protocol\tapoc.data.url(url).file\tapoc.data.url(url).port\tapoc.data.url(url).query\tapoc.data.url(url).anchor\tapoc.data.url(url).host\tapoc.data.url(url).user\n/path/to/file.html\thttps\t/path/to/file.html?x\u003d1\t666\tx\u003d1\tb\tlocalhost\tuser:secret\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635927229657_1883809715",
      "id": "paragraph_1635927229657_1883809715",
      "dateCreated": "2021-11-03 08:13:49.657",
      "dateStarted": "2021-11-03 08:32:22.697",
      "dateFinished": "2021-11-03 08:32:22.760",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n### Text Similarity\n\nWe can compare `text1` with `text2`. Useful, for example, to data clean purpose, with several algorithms:\n\n- apoc.text.levenshteinDistance(text1, text2)\n- apoc.text.levenshteinSimilarity(text1, text2)\n- apoc.text.hammingDistance(text1, text2)\n- apoc.text.jaroWinklerDistance(text1, text2)\n- apoc.text.sorensenDiceSimilarity(text1, text2)\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 08:53:22.554",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eText Similarity\u003c/h3\u003e\n\u003cp\u003eUseful, for example, to data clean purpose:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eapoc.text.distance(text1, text2) - compare the given strings with the Apache Commons StringUtils.distance method (Levenshtein algorithm)\u003c/li\u003e\n\u003cli\u003eapoc.text.levenshteinDistance(text1, text2) - compare the given strings with the Levenshtein distance algorithm\u003c/li\u003e\n\u003cli\u003eapoc.text.levenshteinSimilarity(text1, text2) - calculate the similarity (a value within 0 and 1) between two texts based on Levenshtein distance.\u003c/li\u003e\n\u003cli\u003eapoc.text.hammingDistance(text1, text2) - compare the given strings with the Hamming distance algorithm\u003c/li\u003e\n\u003cli\u003eapoc.text.jaroWinklerDistance(text1, text2) - compare the given strings with the Jaro-Winkler distance algorithm\u003c/li\u003e\n\u003cli\u003eapoc.text.sorensenDiceSimilarity(text1, text2) - compare the given strings with the Sørensen–Dice coefficient formula, assuming an English locale\u003c/li\u003e\n\u003cli\u003eapoc.text.sorensenDiceSimilarityWithLanguage(text1, text2, languageTag) - compare the given strings with the Sørensen–Dice coefficient formula, with the provided IETF language tag\u003c/li\u003e\n\u003cli\u003eapoc.text.fuzzyMatch(text1, text2) - check if 2 words can be matched in a fuzzy way (LevenShtein). Depending on the length of the String it will allow more characters that needs to be edited to match the second String (distance: length \u0026lt; 3 then 0, length \u0026lt; 5 then 1, else 2).\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635928302510_764079613",
      "id": "paragraph_1635928302510_764079613",
      "dateCreated": "2021-11-03 08:31:42.510",
      "dateStarted": "2021-11-03 09:00:42.655",
      "dateFinished": "2021-11-03 09:00:42.693",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nRETURN apoc.text.sorensenDiceSimilarity(\"belly\", \"jolly\") as first, \n    apoc.text.sorensenDiceSimilarity(\"belly\", \"jelly\") as second, \n    apoc.text.sorensenDiceSimilarity(\"belly\", \"belly\") as third",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 09:14:37.099",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "first": "string",
                      "second": "string",
                      "third": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "first\tsecond\tthird\n2\t1\t0\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635928763794_1002626739",
      "id": "paragraph_1635928763794_1002626739",
      "dateCreated": "2021-11-03 08:39:23.794",
      "dateStarted": "2021-11-03 09:14:24.333",
      "dateFinished": "2021-11-03 09:14:24.388",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Spatial procedures\n\nThe spatial procedures enable geographic capabilities on your data, and complement the https://neo4j.com/docs/cypher-manual/current/functions/spatial/[spatial functions^] that come with Neo4j.\nMore extensive Spatial functionality can be found in the https://neo4j-contrib.github.io/spatial/0.24-neo4j-3.1/index.html[Neo4j Spatial Library^].\n\n\n- apoc.spatial.geocode.adoc\n- apoc.spatial.geocodeOnce\n- apoc.spatial.reverseGeocode.adoc\n- apoc.spatial.sortByDistance.adoc\n\n\n\u003d\u003d\u003d Configuring Geocode\n\nThere are a few options that can be set in the apoc.conf file to control the service:\n\n* apoc.spatial.geocode.provider\u003dosm (osm, google, opencage, etc.)\n* apoc.spatial.geocode.osm.throttle\u003d5000 (ms to delay between queries to not overload OSM servers)\n* apoc.spatial.geocode.google.throttle\u003d1 (ms to delay between queries to not overload Google servers)\n* apoc.spatial.geocode.google.key\u003dxxxx (API key for google geocode access)\n* apoc.spatial.geocode.google.client\u003dxxxx (client code for google geocode access)\n* apoc.spatial.geocode.google.signature\u003dxxxx (client signature for google geocode access)\n\nFor google, you should use either a key or a combination of client and signature. Read more\nabout this on the google page for geocode access at\nhttps://developers.google.com/maps/documentation/geocoding/get-api-key#key\n\n\u003d\u003d\u003d Configuring Custom Geocode Provider\n\n*Geocode*\n\nFor any provider that is not \u0027osm\u0027 or \u0027google\u0027 you get a configurable supplier that requires two\nadditional settings, \u0027url\u0027 and \u0027key\u0027. The \u0027url\u0027 must contain the two words \u0027PLACE\u0027 and \u0027KEY\u0027.\nThe \u0027KEY\u0027 will be replaced with the key you get from the provider when you register for the service.\nThe \u0027PLACE\u0027 will be replaced with the address to geocode when the procedure is called.\n\n*Reverse Geocode*\n\nThe \u0027url\u0027 must contain the three words \u0027LAT\u0027, \u0027LNG\u0027 and \u0027KEY\u0027.\nThe \u0027LAT\u0027 will be replaced with the latitude and \u0027LNG\u0027 will be replaced with the the longitude to reverse geocode when the procedure is called.\n\nFor example, to get the service working with OpenCage, perform the following steps:\n\n* Register your own application key at https://geocoder.opencagedata.com/\n* Once you have a key, add the following three lines to apoc.conf\n\n----\napoc.spatial.geocode.provider\u003dopencage\napoc.spatial.geocode.opencage.key\u003dXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\napoc.spatial.geocode.opencage.url\u003dhttp://api.opencagedata.com/geocode/v1/json?q\u003dPLACE\u0026key\u003dKEY\napoc.spatial.geocode.opencage.reverse.url\u003dhttp://api.opencagedata.com/geocode/v1/json?q\u003dLAT+LNG\u0026key\u003dKEY\n----\n\n* make sure that the \u0027XXXXXXX\u0027 part above is replaced with your actual key\n* Restart the Neo4j server and then test the geocode procedures to see that they work\n* If you are unsure if the provider is correctly configured try verify with:\n\n\n\n[source,cypher]\n----\nCALL apoc.spatial.showConfig()\n----\n\n\u003d\u003d Using Geocode within a bigger Cypher query\n\nA more complex, or useful, example which geocodes addresses found in properties of nodes:\n\n[source,cypher]\n----\nMATCH (a:Place)\nWHERE exists(a.address)\nCALL apoc.spatial.geocodeOnce(a.address) YIELD location\nRETURN location.latitude AS latitude, location.longitude AS longitude, location.description AS description\n----\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 09:24:54.555",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d Spatial\u003c/p\u003e\n\u003cp\u003eThe spatial procedures enable geographic capabilities on your data, and complement the \u003ca href\u003d\"https://neo4j.com/docs/cypher-manual/current/functions/spatial/\"\u003ehttps://neo4j.com/docs/cypher-manual/current/functions/spatial/\u003c/a\u003e[spatial functions^] that come with Neo4j.\u003cbr /\u003e\nMore extensive Spatial functionality can be found in the \u003ca href\u003d\"https://neo4j-contrib.github.io/spatial/0.24-neo4j-3.1/index.html\"\u003ehttps://neo4j-contrib.github.io/spatial/0.24-neo4j-3.1/index.html\u003c/a\u003e[Neo4j Spatial Library^].\u003c/p\u003e\n\u003cp\u003e[separator\u003d¦,opts\u003dheader,cols\u003d\u0026ldquo;5,1m,1m\u0026rdquo;]\u003cbr /\u003e\n|\u003d\u003d\u003d\u003cbr /\u003e\n¦Qualified Name¦Type¦Release\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.spatial.geocode.adoc[]\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.spatial.reverseGeocode.adoc[]\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.spatial.sortByDistance.adoc[]\u003cbr /\u003e\n|\u003d\u003d\u003d\u003c/p\u003e\n\u003cp\u003e\u003d\u003d Geocode\u003c/p\u003e\n\u003cp\u003eThe \u003cem\u003egeocode\u003c/em\u003e procedure converts a textual address into a location containing \u003cem\u003elatitude\u003c/em\u003e, \u003cem\u003elongitude\u003c/em\u003e and \u003cem\u003edescription\u003c/em\u003e.\u003cbr /\u003e\nDespite being only a single function, together with the built-in functions \u003cem\u003epoint\u003c/em\u003e and \u003cem\u003edistance\u003c/em\u003e we can achieve quite powerful results.\u003c/p\u003e\n\u003cp\u003eFirst, how can we use the procedure:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.spatial.geocodeOnce(\u0026lsquo;21 rue Paul Bellamy 44000 NANTES FRANCE\u0026rsquo;)\u003cbr /\u003e\nYIELD location\u003cbr /\u003e\nRETURN location.latitude, location.longitude\u003c/h2\u003e\n\u003cp\u003e.Results\u003cbr /\u003e\n[opts\u003d\u0026ldquo;header\u0026rdquo;]\u003cbr /\u003e\n|\u003d\u003d\u003d\u003cbr /\u003e\n| location.latitude | location.longitude\u003cbr /\u003e\n| 47.2221667 | -1.5566625\u003cbr /\u003e\n|\u003d\u003d\u003d\u003c/p\u003e\n\u003cp\u003eThere are three forms of the procedure:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003egeocodeOnce(address) returns zero or one result.\u003c/li\u003e\n\u003cli\u003egeocode(address,maxResults) returns zero, one or more up to maxResults.\u003c/li\u003e\n\u003cli\u003ereverseGeocode(latitude,longitude) returns zero or one result.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis is because the backing geocoding service (OSM, Google, OpenCage or other) might return multiple results for the same query.\u003cbr /\u003e\nGeocodeOnce() is designed to return the first, or highest ranking result.\u003c/p\u003e\n\u003cp\u003eThe third procedure \u003cem\u003ereverseGeocode\u003c/em\u003e will convert a location containing \u003cem\u003elatitude\u003c/em\u003e and \u003cem\u003elongitude\u003c/em\u003e into a textual address.\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.spatial.reverseGeocode(47.2221667,-1.5566625) YIELD location\u003cbr /\u003e\nRETURN location.description;\u003c/h2\u003e\n\u003cp\u003e.Results\u003cbr /\u003e\n[opts\u003d\u0026ldquo;header\u0026rdquo;]\u003cbr /\u003e\n|\u003d\u003d\u003d\u003cbr /\u003e\n| location.description\u003cbr /\u003e\n| \u0026ldquo;21, Rue Paul Bellamy, Talensac - Pont Morand, Hauts-Pavés - Saint-Félix, Nantes, Loire-Atlantique, Pays de la Loire, France métropolitaine, 44000, France\u0026rdquo;\u003cbr /\u003e\n|\u003d\u003d\u003d\u003c/p\u003e\n\u003cp\u003e\u003d\u003d\u003d Configuring Geocode\u003c/p\u003e\n\u003cp\u003eThere are a few options that can be set in the apoc.conf file to control the service:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eapoc.spatial.geocode.provider\u003dosm (osm, google, opencage, etc.)\u003c/li\u003e\n\u003cli\u003eapoc.spatial.geocode.osm.throttle\u003d5000 (ms to delay between queries to not overload OSM servers)\u003c/li\u003e\n\u003cli\u003eapoc.spatial.geocode.google.throttle\u003d1 (ms to delay between queries to not overload Google servers)\u003c/li\u003e\n\u003cli\u003eapoc.spatial.geocode.google.key\u003dxxxx (API key for google geocode access)\u003c/li\u003e\n\u003cli\u003eapoc.spatial.geocode.google.client\u003dxxxx (client code for google geocode access)\u003c/li\u003e\n\u003cli\u003eapoc.spatial.geocode.google.signature\u003dxxxx (client signature for google geocode access)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor google, you should use either a key or a combination of client and signature. Read more\u003cbr /\u003e\nabout this on the google page for geocode access at\u003cbr /\u003e\n\u003ca href\u003d\"https://developers.google.com/maps/documentation/geocoding/get-api-key#key\"\u003ehttps://developers.google.com/maps/documentation/geocoding/get-api-key#key\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003d\u003d\u003d Configuring Custom Geocode Provider\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eGeocode\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eFor any provider that is not \u0026lsquo;osm\u0026rsquo; or \u0026lsquo;google\u0026rsquo; you get a configurable supplier that requires two\u003cbr /\u003e\nadditional settings, \u0026lsquo;url\u0026rsquo; and \u0026lsquo;key\u0026rsquo;. The \u0026lsquo;url\u0026rsquo; must contain the two words \u0026lsquo;PLACE\u0026rsquo; and \u0026lsquo;KEY\u0026rsquo;.\u003cbr /\u003e\nThe \u0026lsquo;KEY\u0026rsquo; will be replaced with the key you get from the provider when you register for the service.\u003cbr /\u003e\nThe \u0026lsquo;PLACE\u0026rsquo; will be replaced with the address to geocode when the procedure is called.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eReverse Geocode\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eThe \u0026lsquo;url\u0026rsquo; must contain the three words \u0026lsquo;LAT\u0026rsquo;, \u0026lsquo;LNG\u0026rsquo; and \u0026lsquo;KEY\u0026rsquo;.\u003cbr /\u003e\nThe \u0026lsquo;LAT\u0026rsquo; will be replaced with the latitude and \u0026lsquo;LNG\u0026rsquo; will be replaced with the the longitude to reverse geocode when the procedure is called.\u003c/p\u003e\n\u003cp\u003eFor example, to get the service working with OpenCage, perform the following steps:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRegister your own application key at \u003ca href\u003d\"https://geocoder.opencagedata.com/\"\u003ehttps://geocoder.opencagedata.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eOnce you have a key, add the following three lines to apoc.conf\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr /\u003e\n\u003ch2\u003eapoc.spatial.geocode.provider\u003dopencage\u003cbr /\u003e\napoc.spatial.geocode.opencage.key\u003dXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\u003cbr /\u003e\napoc.spatial.geocode.opencage.url\u003d\u003ca href\u003d\"http://api.opencagedata.com/geocode/v1/json?q\u003dPLACE\u0026amp;key\u003dKEY\"\u003ehttp://api.opencagedata.com/geocode/v1/json?q\u003dPLACE\u0026amp;key\u003dKEY\u003c/a\u003e\u003cbr /\u003e\napoc.spatial.geocode.opencage.reverse.url\u003d\u003ca href\u003d\"http://api.opencagedata.com/geocode/v1/json?q\u003dLAT+LNG\u0026amp;key\u003dKEY\"\u003ehttp://api.opencagedata.com/geocode/v1/json?q\u003dLAT+LNG\u0026amp;key\u003dKEY\u003c/a\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003emake sure that the \u0026lsquo;XXXXXXX\u0026rsquo; part above is replaced with your actual key\u003c/li\u003e\n\u003cli\u003eRestart the Neo4j server and then test the geocode procedures to see that they work\u003c/li\u003e\n\u003cli\u003eIf you are unsure if the provider is correctly configured try verify with:\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.spatial.showConfig()\u003c/h2\u003e\n\u003cp\u003e\u003d\u003d Using Geocode within a bigger Cypher query\u003c/p\u003e\n\u003cp\u003eA more complex, or useful, example which geocodes addresses found in properties of nodes:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eMATCH (a:Place)\u003cbr /\u003e\nWHERE exists(a.address)\u003cbr /\u003e\nCALL apoc.spatial.geocodeOnce(a.address) YIELD location\u003cbr /\u003e\nRETURN location.latitude AS latitude, location.longitude AS longitude, location.description AS description\u003c/h2\u003e\n\u003cp\u003e\u003d\u003d Calculating distance between locations\u003c/p\u003e\n\u003cp\u003eIf we wish to calculate the distance between addresses, we need to use the point() function to convert\u003cbr /\u003e\nlatitude and longitude to Cyper Point types, and then use the distance() function to calculate the distance:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eWITH point({latitude: 48.8582532, longitude: 2.294287}) AS eiffel\u003cbr /\u003e\nMATCH (a:Place)\u003cbr /\u003e\nWHERE exists(a.address)\u003cbr /\u003e\nCALL apoc.spatial.geocodeOnce(a.address) YIELD location\u003cbr /\u003e\nWITH location, distance(point(location), eiffel) AS distance\u003cbr /\u003e\nWHERE distance \u0026lt; 5000\u003cbr /\u003e\nRETURN location.description AS description, distance\u003cbr /\u003e\nORDER BY distance\u003cbr /\u003e\nLIMIT 100\u003c/h2\u003e\n\u003cp\u003e\u003d\u003d\u003d sortByDistance\u003c/p\u003e\n\u003cp\u003eThe second procedure enables you to sort a given collection of paths by the sum of their distance based on lat/long properties\u003cbr /\u003e\non the nodes.\u003c/p\u003e\n\u003cp\u003eSample data :\u003c/p\u003e\n\u003ch2\u003e[source, cypher]\u003c/h2\u003e\n\u003ch2\u003eCREATE (bruges:City {name:\u0026ldquo;bruges\u0026rdquo;, latitude: 51.2605829, longitude: 3.0817189})\u003cbr /\u003e\nCREATE (brussels:City {name:\u0026ldquo;brussels\u0026rdquo;, latitude: 50.854954, longitude: 4.3051786})\u003cbr /\u003e\nCREATE (paris:City {name:\u0026ldquo;paris\u0026rdquo;, latitude: 48.8588376, longitude: 2.2773455})\u003cbr /\u003e\nCREATE (dresden:City {name:\u0026ldquo;dresden\u0026rdquo;, latitude: 51.0767496, longitude: 13.6321595})\u003cbr /\u003e\nMERGE (bruges)-[:NEXT]-\u0026gt;(brussels)\u003cbr /\u003e\nMERGE (brussels)-[:NEXT]-\u0026gt;(dresden)\u003cbr /\u003e\nMERGE (brussels)-[:NEXT]-\u0026gt;(paris)\u003cbr /\u003e\nMERGE (bruges)-[:NEXT]-\u0026gt;(paris)\u003cbr /\u003e\nMERGE (paris)-[:NEXT]-\u0026gt;(dresden)\u003c/h2\u003e\n\u003cp\u003eFinding paths and sort them by distance\u003c/p\u003e\n\u003ch2\u003e[source, cypher]\u003c/h2\u003e\n\u003ch2\u003eMATCH (a:City {name:\u0026lsquo;bruges\u0026rsquo;}), (b:City {name:\u0026lsquo;dresden\u0026rsquo;})\u003cbr /\u003e\nMATCH p\u003d(a)-[*]-\u0026gt;(b)\u003cbr /\u003e\nWITH collect(p) as paths\u003cbr /\u003e\nCALL apoc.spatial.sortByDistance(paths) YIELD path, distance\u003cbr /\u003e\nRETURN path, distance\u003c/h2\u003e\n\u003cp\u003e\u003d\u003d Graph Refactoring\u003c/p\u003e\n\u003cp\u003eIn order not to have to repeatedly geocode the same thing in multiple queries, especially\u003cbr /\u003e\nif the database will be used by many people, it might be a good idea to persist the results\u003cbr /\u003e\nin the database so that subsequent calls can use the saved results.\u003c/p\u003e\n\u003cp\u003eGeocode and persist the result\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eMATCH (a:Place)\u003cbr /\u003e\nWHERE exists(a.address) AND NOT exists(a.latitude)\u003cbr /\u003e\nWITH a LIMIT 1000\u003cbr /\u003e\nCALL apoc.spatial.geocodeOnce(a.address) YIELD location\u003cbr /\u003e\nSET a.latitude \u003d location.latitude\u003cbr /\u003e\nSET a.longitude \u003d location.longitude\u003c/h2\u003e\n\u003cp\u003eNote that the above command only geocodes the first 1000 ‘Place’ nodes that have not already been geocoded.\u003cbr /\u003e\nThis query can be run multiple times until all places are geocoded. Why would we want to do this?\u003cbr /\u003e\nTwo good reasons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe geocoding service is a public service that can throttle or blacklist sites that hit the service too heavily, so controlling how much we do is useful.\u003c/li\u003e\n\u003cli\u003eThe transaction is updating the database, and it is wise not to update the database with too many things in the same transaction, to avoid using up too much memory. This trick will keep the memory usage very low.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNow make use of the results in distance queries\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eWITH point({latitude: 48.8582532, longitude: 2.294287}) AS eiffel\u003cbr /\u003e\nMATCH (a:Place)\u003cbr /\u003e\nWHERE exists(a.latitude) AND exists(a.longitude)\u003cbr /\u003e\nWITH a, distance(point(a), eiffel) AS distance\u003cbr /\u003e\nWHERE distance \u0026lt; 5000\u003cbr /\u003e\nRETURN a.name, distance\u003cbr /\u003e\nORDER BY distance\u003cbr /\u003e\nLIMIT 100\u003c/h2\u003e\n\u003cp\u003e\u003d\u003d Combined Space and Time search\u003c/p\u003e\n\u003cp\u003eCombining spatial and date-time functions can allow for more complex queries:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eWITH point({latitude: 48.8582532, longitude: 2.294287}) AS eiffel\u003cbr /\u003e\nMATCH (e:Event)\u003cbr /\u003e\nWHERE exists(e.address) AND exists(e.datetime)\u003cbr /\u003e\nCALL apoc.spatial.geocodeOnce(e.address) YIELD location\u003cbr /\u003e\nWITH e, location,\u003cbr /\u003e\ndistance(point(location), eiffel) AS distance,\u003cbr /\u003e\n(apoc.date.parse(\u0026lsquo;2016-06-01 00:00:00\u0026rsquo;,\u0026lsquo;h\u0026rsquo;) - apoc.date.parse(e.datetime,\u0026lsquo;h\u0026rsquo;))/24.0 AS days_before_due\u003cbr /\u003e\nWHERE distance \u0026lt; 5000 AND days_before_due \u0026lt; 14 AND apoc.date.parse(e.datetime,\u0026lsquo;h\u0026rsquo;) \u0026lt; apoc.date.parse(\u0026lsquo;2016-06-01 00:00:00\u0026rsquo;,\u0026lsquo;h\u0026rsquo;)\u003cbr /\u003e\nRETURN e.name AS event, e.datetime AS date,\u003cbr /\u003e\nlocation.description AS description, distance\u003cbr /\u003e\nORDER BY distance\u003c/h2\u003e\n\u003cp\u003eWith date parse we can parse any type of string date to date\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eWITH apoc.date.parse(\u0026quot;31/05/2019\u0026quot;, \u0026quot;ms\u0026quot;, \u0026quot;dd/MM/yyyy\u0026quot;) AS ms\nRETURN date(datetime({epochmillis: ms})) AS date\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349510510_26604918",
      "id": "paragraph_1635349510510_26604918",
      "dateCreated": "2021-10-27 15:45:10.510",
      "dateStarted": "2021-10-29 12:08:52.992",
      "dateFinished": "2021-10-29 12:08:53.039",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Geocode functions\n\nThere are three forms of the procedure:\n\n* geocodeOnce(address) returns zero or one result.\n* geocode(address,maxResults) returns zero, one or more up to maxResults.\n* reverseGeocode(latitude,longitude) returns zero or one result.\n\nThe `geocode` and `geocodeOnce` procedure converts a textual address into a location containing _latitude_, _longitude_ and _description_.\n`GeocodeOnce()` is designed to return the first, or highest ranking result.\nThis is because the backing geocoding service (OSM, Google, OpenCage or other) might return multiple results for the same query.\n\nThe third procedure _reverseGeocode_ will convert a location containing _latitude_ and _longitude_ into a textual address.",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 09:02:12.470",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635931448998_2028143042",
      "id": "paragraph_1635931448998_2028143042",
      "dateCreated": "2021-11-03 09:24:08.998",
      "status": "READY"
    },
    {
      "text": "%neo4j\nCALL apoc.spatial.geocodeOnce(\u002721 rue Paul Bellamy 44000 NANTES FRANCE\u0027)\nYIELD location\nRETURN location.latitude, location.longitude",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 09:33:27.413",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635931999762_721699628",
      "id": "paragraph_1635931999762_721699628",
      "dateCreated": "2021-11-03 09:33:19.762",
      "status": "READY"
    },
    {
      "title": "Calculating distance between locations",
      "text": "%neo4j\n\n// If we wish to calculate the distance between addresses, we need to use the point() function to convert\n// latitude and longitude to Cyper Point types, and then use the distance() function to calculate the distance:\n\n\nWITH point({latitude: 48.8582532, longitude: 2.294287}) AS eiffel\nUNWIND [\u002721 rue Paul Bellamy 44000 NANTES FRANCE\u0027, \u002721 rue Paul Bellamy 44000 NANTES FRANCE\u0027] as address // todo - edit\nWITH address, eiffel\nCALL apoc.spatial.geocodeOnce(address) YIELD location\nWITH location, distance(point(location), eiffel) AS distance\n// WHERE distance \u003c 5000\nRETURN location.description AS description, distance\nORDER BY distance",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 09:32:59.399",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "description": "string",
                      "distance": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "title": true,
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "description\tdistance\n\"21, Rue Paul Bellamy, Rennes - Bellamy, Hauts-Pavés - Saint-Félix, Nantes, Loire-Atlantique, Pays de la Loire, France métropolitaine, 44000, France\"\t339529.43088263326\n\"21, Rue Paul Bellamy, Rennes - Bellamy, Hauts-Pavés - Saint-Félix, Nantes, Loire-Atlantique, Pays de la Loire, France métropolitaine, 44000, France\"\t339529.43088263326\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635931459750_1275242928",
      "id": "paragraph_1635931459750_1275242928",
      "dateCreated": "2021-11-03 09:24:19.750",
      "dateStarted": "2021-11-03 09:32:53.374",
      "dateFinished": "2021-11-03 09:32:58.731",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n----\nCREATE (bruges:City {name:\"bruges\", latitude: 51.2605829, longitude: 3.0817189})\nCREATE (brussels:City {name:\"brussels\", latitude: 50.854954, longitude: 4.3051786})\nCREATE (paris:City {name:\"paris\", latitude: 48.8588376, longitude: 2.2773455})\nCREATE (dresden:City {name:\"dresden\", latitude: 51.0767496, longitude: 13.6321595})\nMERGE (bruges)-[:NEXT]-\u003e(brussels)\nMERGE (brussels)-[:NEXT]-\u003e(dresden)\nMERGE (brussels)-[:NEXT]-\u003e(paris)\nMERGE (bruges)-[:NEXT]-\u003e(paris)\nMERGE (paris)-[:NEXT]-\u003e(dresden)",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 09:02:56.595",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636448570271_192343414",
      "id": "paragraph_1636448570271_192343414",
      "dateCreated": "2021-11-09 09:02:50.271",
      "status": "READY"
    },
    {
      "text": "%neo4j\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 09:02:57.049",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636448577049_1532594502",
      "id": "paragraph_1636448577049_1532594502",
      "dateCreated": "2021-11-09 09:02:57.049",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\nMATCH (a:City {name:\u0027bruges\u0027}), (b:City {name:\u0027dresden\u0027})\nMATCH p\u003d(a)-[*]-\u003e(b)\nWITH collect(p) as paths\nCALL apoc.spatial.sortByDistance(paths) YIELD path, distance\nRETURN path, distance\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 09:03:09.581",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635931344375_2143164700",
      "id": "paragraph_1635931344375_2143164700",
      "dateCreated": "2021-11-03 09:22:24.375",
      "status": "READY"
    },
    {
      "text": "%md\n\n# Date and time functions\n\nNeo4j supports date and temporal values, but often, we are dealing with differing date formats between systems or files. These can be difficult to express and translate without a few flexible procedures to handle converting one value formatting to another.\n\nAPOC has several procedures for converting and formatting various date, time, and temporal values. They save valuable time in manually converting values or creating a procedure from scratch! The full list of available procedures is in the APOC documentation.\n\n- apoc.date.add(12345, \u0027ms\u0027, -365, \u0027d\u0027) - given a timestamp in one time unit, adds a value of the specified time unit\n- apoc.date.convert(12345, \u0027ms\u0027, \u0027d\u0027) - convert a timestamp in one time unit into one of a different time unit\n- apoc.date.convertFormat(\u0027Tue, 14 May 2019 14:52:06 -0400\u0027, \u0027rfc_1123_date_time\u0027, \u0027iso_date_time\u0027) - convert a String of one date format into a String of another date format.\n- apoc.date.currentTimestamp() - returns System.currentTimeMillis() at the time it was called. The value is current throughout transaction execution, and is different from Cypher’s timestamp() function, which does not update within a transaction.\n- apoc.date.field(12345,(\u0027ms\\|s\\|m\\|h\\|d\\|month\\|year\u0027),(\u0027TZ\u0027)\n- apoc.date.fields(\u00272012-12-23\u0027,(\u0027yyyy-MM-dd\u0027)) - return columns and a map representation of date parsed with the given format with entries for years,months,weekdays,days,hours,minutes,seconds,zoneid\n- apoc.date.format(12345,(\u0027ms\\|s\\|m\\|h\\|d\u0027),(\u0027yyyy-MM-dd HH:mm:ss zzz\u0027),(\u0027TZ\u0027)) - get string representation of time value optionally using the specified unit (default ms) using specified format (default ISO) and specified time zone (default current TZ)\n- apoc.date.fromISO8601(\u0027yyyy-MM-ddTHH:mm:ss.SSSZ\u0027) - return number representation of time in EPOCH format\n- apoc.date.parse(\u00272012-12-23\u0027,\u0027ms\\|s\\|m\\|h\\|d\u0027,\u0027yyyy-MM-dd\u0027) - parse date string using the specified format into the specified time unit\n- apoc.date.parseAsZonedDateTime(\u00272012-12-23 23:59:59\u0027,\u0027yyyy-MM-dd HH:mm:ss\u0027, \u0027UTC-hour-offset\u0027) - parse date string using the specified format to specified timezone\n- apoc.date.systemTimezone() - returns the system timezone display name\n- apoc.date.toISO8601(12345,(\u0027ms\\|s\\|m\\|h\\|d\u0027) - return string representation of time in ISO8601 format\ntoYears(timestamp) or toYears(date[,format]) - converts timestamp into floating point years\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-07 15:19:24.416",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eDate and time functions\u003c/h1\u003e\n\u003cp\u003eNeo4j supports date and temporal values, but often, we are dealing with differing date formats between systems or files. These can be difficult to express and translate without a few flexible procedures to handle converting one value formatting to another.\u003c/p\u003e\n\u003cp\u003eAPOC has several procedures for converting and formatting various date, time, and temporal values. They save valuable time in manually converting values or creating a procedure from scratch! The full list of available procedures is in the APOC documentation.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eapoc.date.add(12345, \u0026lsquo;ms\u0026rsquo;, -365, \u0026lsquo;d\u0026rsquo;) - given a timestamp in one time unit, adds a value of the specified time unit\u003c/li\u003e\n\u003cli\u003eapoc.date.convert(12345, \u0026lsquo;ms\u0026rsquo;, \u0026lsquo;d\u0026rsquo;) - convert a timestamp in one time unit into one of a different time unit\u003c/li\u003e\n\u003cli\u003eapoc.date.convertFormat(\u0026lsquo;Tue, 14 May 2019 14:52:06 -0400\u0026rsquo;, \u0026lsquo;rfc_1123_date_time\u0026rsquo;, \u0026lsquo;iso_date_time\u0026rsquo;) - convert a String of one date format into a String of another date format.\u003c/li\u003e\n\u003cli\u003eapoc.date.currentTimestamp() - returns System.currentTimeMillis() at the time it was called. The value is current throughout transaction execution, and is different from Cypher’s timestamp() function, which does not update within a transaction.\u003c/li\u003e\n\u003cli\u003eapoc.date.field(12345,(\u0026lsquo;ms|s|m|h|d|month|year\u0026rsquo;),(\u0026lsquo;TZ\u0026rsquo;)\u003c/li\u003e\n\u003cli\u003eapoc.date.fields(\u0026lsquo;2012-12-23\u0026rsquo;,(\u0026lsquo;yyyy-MM-dd\u0026rsquo;)) - return columns and a map representation of date parsed with the given format with entries for years,months,weekdays,days,hours,minutes,seconds,zoneid\u003c/li\u003e\n\u003cli\u003eapoc.date.format(12345,(\u0026lsquo;ms|s|m|h|d\u0026rsquo;),(\u0026lsquo;yyyy-MM-dd HH:mm:ss zzz\u0026rsquo;),(\u0026lsquo;TZ\u0026rsquo;)) - get string representation of time value optionally using the specified unit (default ms) using specified format (default ISO) and specified time zone (default current TZ)\u003c/li\u003e\n\u003cli\u003eapoc.date.fromISO8601(\u0026lsquo;yyyy-MM-ddTHH:mm:ss.SSSZ\u0026rsquo;) - return number representation of time in EPOCH format\u003c/li\u003e\n\u003cli\u003eapoc.date.parse(\u0026lsquo;2012-12-23\u0026rsquo;,\u0026lsquo;ms|s|m|h|d\u0026rsquo;,\u0026lsquo;yyyy-MM-dd\u0026rsquo;) - parse date string using the specified format into the specified time unit\u003c/li\u003e\n\u003cli\u003eapoc.date.parseAsZonedDateTime(\u0026lsquo;2012-12-23 23:59:59\u0026rsquo;,\u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;, \u0026lsquo;UTC-hour-offset\u0026rsquo;) - parse date string using the specified format to specified timezone\u003c/li\u003e\n\u003cli\u003eapoc.date.systemTimezone() - returns the system timezone display name\u003c/li\u003e\n\u003cli\u003eapoc.date.toISO8601(12345,(\u0026lsquo;ms|s|m|h|d\u0026rsquo;) - return string representation of time in ISO8601 format\u003cbr /\u003e\ntoYears(timestamp) or toYears(date[,format]) - converts timestamp into floating point years\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349592486_1411303387",
      "id": "paragraph_1635349592486_1411303387",
      "dateCreated": "2021-10-27 15:46:32.486",
      "dateStarted": "2021-11-07 15:19:24.416",
      "dateFinished": "2021-11-07 15:19:24.431",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nRETURN apoc.date.fields(\"2020-11-04T10:30:21\", \"YYYY-MM-dd\u0027T\u0027HH:mm:ss\") AS date;",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 10:23:20.825",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "date.hours": "string",
                      "date.seconds": "string",
                      "date.months": "string",
                      "date.minutes": "string",
                      "date.days": "string",
                      "date.zoneid": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "date.hours\tdate.seconds\tdate.months\tdate.minutes\tdate.days\tdate.zoneid\n10\t21\t11\t30\t4\tUTC\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635934975631_616193110",
      "id": "paragraph_1635934975631_616193110",
      "dateCreated": "2021-11-03 10:22:55.631",
      "dateStarted": "2021-11-03 10:23:20.442",
      "dateFinished": "2021-11-03 10:23:20.484",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n### Converting dates from Integer to String\n\nThe APOC apoc.date.format() takes an integer value for the date and converts it to a string in the desired format, including a custom one. This is commonly used when translating data from APIs, flat files, or even other databases and moving that data into or out of Neo4j.\n\nFormat: apoc.date.format(12345, [\u0027ms\u0027/\u0027s\u0027], [\u0027yyyy/MM/dd HH:mm:ss\u0027])\n\nThis procedure has 3 parameters -\n\n    the date integer value to convert\n\n    how specific the first parameter is (s for seconds, ms for milliseconds)\n\n    how we want the date string result to look",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 09:55:33.083",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch3\u003eConverting dates from Integer to String\u003c/h3\u003e\n\u003cp\u003eThe APOC apoc.date.format() takes an integer value for the date and converts it to a string in the desired format, including a custom one. This is commonly used when translating data from APIs, flat files, or even other databases and moving that data into or out of Neo4j.\u003c/p\u003e\n\u003cp\u003eFormat: apoc.date.format(12345, [\u0026lsquo;ms\u0026rsquo;/\u0026lsquo;s\u0026rsquo;], [\u0026lsquo;yyyy/MM/dd HH:mm:ss\u0026rsquo;])\u003c/p\u003e\n\u003cp\u003eThis procedure has 3 parameters -\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe date integer value to convert\n\nhow specific the first parameter is (s for seconds, ms for milliseconds)\n\nhow we want the date string result to look\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635409417948_1233797478",
      "id": "paragraph_1635409417948_1233797478",
      "dateCreated": "2021-10-28 08:23:37.948",
      "dateStarted": "2021-11-03 09:55:33.083",
      "dateFinished": "2021-11-03 09:55:33.115",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nWITH datetime(\"2020-11-04T11:23:22\").epochMillis AS datetime // convert in epoch milliseconds\nRETURN apoc.date.format(datetime, \"ms\", \"yyyy-MM-dd\") AS output",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 10:31:05.647",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "output": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "output\n\"2020-11-04\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635933349161_134025564",
      "id": "paragraph_1635933349161_134025564",
      "dateCreated": "2021-11-03 09:55:49.161",
      "dateStarted": "2021-11-03 10:30:58.200",
      "dateFinished": "2021-11-03 10:30:58.225",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Converting dates from String to Integer\n\nLet us do the reverse of what we just did on the previous slide by converting a string value to an integer with apoc.date.parse(). This is helpful for comparing date strings from and to various formats, most commonly in data import or export.\n\nFormat: apoc.date.parse(\u00272019/03/25 03:15:59\u0027, [\u0027ms\u0027/\u0027s\u0027], [\u0027yyyy/MM/dd HH:mm:ss\u0027])\n\nThe procedure needs 3 parameters -\n\n    the date string that needs converted\n\n    how specific the conversion should be (down to seconds s or milliseconds ms)\n\n    what the format is of the date string (1st parameter)",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 09:58:27.952",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eConverting dates from String to Integer\u003c/h2\u003e\n\u003cp\u003eLet us do the reverse of what we just did on the previous slide by converting a string value to an integer with apoc.date.parse(). This is helpful for comparing date strings from and to various formats, most commonly in data import or export.\u003c/p\u003e\n\u003cp\u003eFormat: apoc.date.parse(\u0026lsquo;2019/03/25 03:15:59\u0026rsquo;, [\u0026lsquo;ms\u0026rsquo;/\u0026lsquo;s\u0026rsquo;], [\u0026lsquo;yyyy/MM/dd HH:mm:ss\u0026rsquo;])\u003c/p\u003e\n\u003cp\u003eThe procedure needs 3 parameters -\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe date string that needs converted\n\nhow specific the conversion should be (down to seconds s or milliseconds ms)\n\nwhat the format is of the date string (1st parameter)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635409454888_1885902767",
      "id": "paragraph_1635409454888_1885902767",
      "dateCreated": "2021-10-28 08:24:14.888",
      "dateStarted": "2021-10-29 12:08:53.580",
      "dateFinished": "2021-10-29 12:08:53.591",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## apoc.date.parse Example:\n\nLet us say that we received a notification from our monitoring system that there was an error in the system at timestamp 882230400, so we need to find out which orders were possibly affected by the error. We can use apoc.date.parse() to convert the string-formatted date in our Northwind data to a timestamp and compare that to the timestamp we have from our error system.\n\nWITH 882230400 as errorTimestamp //1997-12-16 00:00:00.000 in epoch seconds\nMATCH (o:Order)\nWHERE apoc.date.parse(o.orderDate, \u0027s\u0027, \u0027yyyy-MM-dd HH:mm:ss.SSS\u0027) \u003d errorTimestamp\nRETURN o\n\nIn our example, we are given a date integer (epoch time from the error in monitoring system) and want to find the orders that were made on that date. We use MATCH to search for Order nodes where the converted orderDate property (using the procedure) matches the date integer of the error and return the orders that are found.\n\nIn the return, we should see 3 orders that have an order date of 1997-12-16!",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:08:56.643",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eapoc.date.parse Example:\u003c/h2\u003e\n\u003cp\u003eLet us say that we received a notification from our monitoring system that there was an error in the system at timestamp 882230400, so we need to find out which orders were possibly affected by the error. We can use apoc.date.parse() to convert the string-formatted date in our Northwind data to a timestamp and compare that to the timestamp we have from our error system.\u003c/p\u003e\n\u003cp\u003eWITH 882230400 as errorTimestamp //1997-12-16 00:00:00.000 in epoch seconds\u003cbr /\u003e\nMATCH (o:Order)\u003cbr /\u003e\nWHERE apoc.date.parse(o.orderDate, \u0026lsquo;s\u0026rsquo;, \u0026lsquo;yyyy-MM-dd HH:mm:ss.SSS\u0026rsquo;) \u003d errorTimestamp\u003cbr /\u003e\nRETURN o\u003c/p\u003e\n\u003cp\u003eIn our example, we are given a date integer (epoch time from the error in monitoring system) and want to find the orders that were made on that date. We use MATCH to search for Order nodes where the converted orderDate property (using the procedure) matches the date integer of the error and return the orders that are found.\u003c/p\u003e\n\u003cp\u003eIn the return, we should see 3 orders that have an order date of 1997-12-16!\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635409466645_527241096",
      "id": "paragraph_1635409466645_527241096",
      "dateCreated": "2021-10-28 08:24:26.645",
      "dateStarted": "2021-10-29 12:08:53.702",
      "dateFinished": "2021-10-29 12:08:53.712",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\n// the Movie Graph has only integer year values, so we have to convert them in string\nWITH 915148800 as matrixDate //1 January 1999 00:00:00 in epoch seconds\nMATCH (m:Movie)\nWHERE apoc.date.parse(toString(m.released), \u0027s\u0027, \u0027yyyy\u0027) \u003d matrixDate // 1999 movies\nRETURN m",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 10:17:58.998",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 208.011,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "tagline": "string",
                      "title": "string",
                      "released": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":0,\"data\":{\"tagline\":\"Welcome to the Real World\",\"title\":\"The Matrix\",\"released\":1999},\"label\":\"Movie\"},{\"id\":130,\"data\":{\"tagline\":\"Walk a mile you\\u0027ll never forget.\",\"title\":\"The Green Mile\",\"released\":1999},\"label\":\"Movie\"},{\"id\":157,\"data\":{\"tagline\":\"One robot\\u0027s 200 year journey to become an ordinary man.\",\"title\":\"Bicentennial Man\",\"released\":1999},\"label\":\"Movie\"},{\"id\":62,\"data\":{\"tagline\":\"First loves last. Forever.\",\"title\":\"Snow Falling on Cedars\",\"released\":1999},\"label\":\"Movie\"}],\"edges\":[],\"labels\":{\"TTL\":\"#6C116B\",\"Movie\":\"#ADC059\",\"Person\":\"#F25A9E\"},\"types\":[\"ACTED_IN\",\"REVIEWED\",\"PRODUCED\",\"WROTE\",\"FOLLOWS\",\"DIRECTED\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635933561109_1996402939",
      "id": "paragraph_1635933561109_1996402939",
      "dateCreated": "2021-11-03 09:59:21.109",
      "dateStarted": "2021-11-03 10:12:14.984",
      "dateFinished": "2021-11-03 10:12:15.070",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Adding or subtracting units from timestamps\n\nWe can easily add or subtract a specified time value to find the desired timestamp.\n\n```\napoc.date.add(12345, \u0027ms\u0027, -365, \u0027d\u0027)\n```\n\nWhere parameters are:\n- the date integer for adding or subtracting\n- the unit type of the initial date\n- the number to add/substract from date\n- the unit type to add/substract",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 10:41:58.753",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d Adding or subtracting units from timestamps\u003c/p\u003e\n\u003cp\u003eThe marketing department might want to see how well a marketing campaign did to generate sales. The campaign was published at timestamp 891388800, and we need to find out how many sales it generated within the first 30 days running.\u003c/p\u003e\n\u003cp\u003eWe can use apoc.date.add() to take a point in time of epoch milliseconds (integer) and add or subtract a specified time value to find the desired timestamp.\u003c/p\u003e\n\u003cp\u003eFormat: apoc.date.add(12345, \u0026lsquo;ms\u0026rsquo;, -365, \u0026lsquo;d\u0026rsquo;)\u003c/p\u003e\n\u003cp\u003eThe procedure above contains 4 parameters -\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe date integer for adding or subtracting\n\nhow specific the date integer is (s for seconds, ms for milliseconds)\n\nthe number to add or subtract from the date integer\n\nthe unit type to add or subtract\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635409477872_135728276",
      "id": "paragraph_1635409477872_135728276",
      "dateCreated": "2021-10-28 08:24:37.872",
      "dateStarted": "2021-10-29 12:08:53.819",
      "dateFinished": "2021-10-29 12:08:53.828",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nWITH 891388800 as startDate\nWITH startDate, apoc.date.add(startDate, \u0027s\u0027, 31, \u0027d\u0027) as endDate\nRETURN apoc.date.format(startDate,\u0027s\u0027,\u0027yyyy-MM-dd\u0027) as startDate, apoc.date.format(endDate,\u0027s\u0027,\u0027yyyy-MM-dd\u0027) as endDate",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 09:04:02.465",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 214.006,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "startDate": "string",
                      "endDate": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "startDate\tendDate\n\"1998-04-01\"\t\"1998-05-02\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635409495647_893356114",
      "id": "paragraph_1635409495647_893356114",
      "dateCreated": "2021-10-28 08:24:55.647",
      "dateStarted": "2021-11-03 10:39:37.671",
      "dateFinished": "2021-11-03 10:39:37.714",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Converting date string to temporal type\n\nSo far, we have worked with order dates as strings with a particular format. However, Neo4j supports date and time types, so it would probably make things much easier if we converted to the native types.\n\nThere is an APOC procedure to convert the format from a string to a temporal type. Since Neo4j is compatible with the ISO 8601 standard, we will use that for our result format.\n\nFormat: apoc.date.convertFormat(\u00272019-12-31 16:14:20\u0027, \u0027yyyy-MM-dd HH:mm:ss\u0027, \u0027iso_date_format\u0027)\n\nThe procedure contains 3 parameters -\n\n    the date string that needs converted\n\n    what the format is of the date string\n\n    the format for the resulting temporal type (can be specified manually, as Java formats, or as these built-in formats)\n\n\n\nhttps://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\nhttps://www.elastic.co/guide/en/elasticsearch/reference/5.5/mapping-date-format.html#built-in-date-formats\n\napoc.date.convertFormat Example:\n\nMATCH (o:Order)\nSET o.isoOrderDate \u003d apoc.date.convertFormat(o.orderDate, \u0027yyyy-MM-dd HH:mm:ss.SSS\u0027, \u0027iso_date_time\u0027)\nRETURN o\n\nIn the query above, we find all the orders in our system and set a new property called isoOrderDate that is equal to the converted orderDate string. The orderDate is converted using the procedure, specifying the string format it is currently in and the iso_date_time format (2019-01-01T00:00:00) we want to have as the result.\n\nResults of the query should return a sample (Browser will limit how much JavaScript has to render) of the orders we updated. Clicking on one shows all the properties on that node, including the new isoOrderDate property that is formatted as we expected!\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 09:04:18.719",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d Converting date string to temporal type\u003c/p\u003e\n\u003cp\u003eSo far, we have worked with order dates as strings with a particular format. However, Neo4j supports date and time types, so it would probably make things much easier if we converted to the native types.\u003c/p\u003e\n\u003cp\u003eThere is an APOC procedure to convert the format from a string to a temporal type. Since Neo4j is compatible with the ISO 8601 standard, we will use that for our result format.\u003c/p\u003e\n\u003cp\u003eFormat: apoc.date.convertFormat(\u0026lsquo;2019-12-31 16:14:20\u0026rsquo;, \u0026lsquo;yyyy-MM-dd HH:mm:ss\u0026rsquo;, \u0026lsquo;iso_date_format\u0026rsquo;)\u003c/p\u003e\n\u003cp\u003eThe procedure contains 3 parameters -\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe date string that needs converted\n\nwhat the format is of the date string\n\nthe format for the resulting temporal type (can be specified manually, as Java formats, or as these built-in formats)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003d\u003d\u003cbr /\u003e\napoc.date.convertFormat Example:\u003c/p\u003e\n\u003cp\u003eMATCH (o:Order)\u003cbr /\u003e\nSET o.isoOrderDate \u003d apoc.date.convertFormat(o.orderDate, \u0026lsquo;yyyy-MM-dd HH:mm:ss.SSS\u0026rsquo;, \u0026lsquo;iso_date_time\u0026rsquo;)\u003cbr /\u003e\nRETURN o\u003c/p\u003e\n\u003cp\u003eIn the query above, we find all the orders in our system and set a new property called isoOrderDate that is equal to the converted orderDate string. The orderDate is converted using the procedure, specifying the string format it is currently in and the iso_date_time format (2019-01-01T00:00:00) we want to have as the result.\u003c/p\u003e\n\u003cp\u003eResults of the query should return a sample (Browser will limit how much JavaScript has to render) of the orders we updated. Clicking on one shows all the properties on that node, including the new isoOrderDate property that is formatted as we expected!\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635409505023_265615401",
      "id": "paragraph_1635409505023_265615401",
      "dateCreated": "2021-10-28 08:25:05.023",
      "dateStarted": "2021-10-29 12:08:54.055",
      "dateFinished": "2021-10-29 12:08:54.066",
      "status": "FINISHED"
    },
    {
      "text": "%md\n// The following converts a date in date_hour (yyyy-MM-dd’T’HH) format to date_hour_minute (yyyy-MM-dd’T’HH:mm) format:\n\nCypher\nCopy to Clipboard\nRun in Neo4j Browser\nRETURN apoc.date.convertFormat(\"2020-11-04T22\", \"date_hour\", \"date_hour_minute\") AS output;",
      "user": "anonymous",
      "dateUpdated": "2021-11-03 10:25:55.815",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635935150413_1539766532",
      "id": "paragraph_1635935150413_1539766532",
      "dateCreated": "2021-11-03 10:25:50.413",
      "status": "READY"
    },
    {
      "text": "%md\n\n## Conversion functions\n\n\u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/\" target\u003d\"_blank\"\u003eHere\u003c/a\u003e are the conversion functions/procedures.\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 09:05:22.577",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eConversion functions\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/overview/apoc.convert/\" target\u003d\"_blank\"\u003eHere\u003c/a\u003e are the conversion functions/procedures.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635410629828_1292976084",
      "id": "paragraph_1635410629828_1292976084",
      "dateCreated": "2021-10-28 08:43:49.828",
      "dateStarted": "2021-11-09 09:05:22.578",
      "dateFinished": "2021-11-09 09:05:22.594",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nMATCH path \u003d ()-[:ACTED_IN]-\u003e()\nRETURN apoc.convert.toList(path)[0];",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 09:05:06.378",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636448703213_956391912",
      "id": "paragraph_1636448703213_956391912",
      "dateCreated": "2021-11-09 09:05:03.213",
      "dateStarted": "2021-11-09 09:05:06.397",
      "dateFinished": "2021-11-09 09:05:06.545",
      "status": "FINISHED"
    },
    {
      "text": "",
      "user": "anonymous",
      "dateUpdated": "2021-11-05 16:29:53.690",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635869719574_1755877996",
      "id": "paragraph_1635869719574_1755877996",
      "dateCreated": "2021-11-02 16:15:19.574",
      "status": "READY"
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:08:56.709",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635410637176_2038794128",
      "id": "paragraph_1635410637176_2038794128",
      "dateCreated": "2021-10-28 08:43:57.176",
      "status": "FINISHED"
    }
  ],
  "name": "7. Property and composite types manipulation",
  "id": "2GN8QQ2U3",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}