{
  "paragraphs": [
    {
      "text": "%md\n# Virtual entities\n\nWe can visualize nodes and relationships that don’t exist in the graph but only returned by a query. This could be used for:\n\n- return only a few properties of nodes/rels to the visualization, e.g. if you have huge text properties\n- aggregate information to a higher level of abstraction\n- visualization of data from other sources (computation, RDBMS, document-dbs, CSV, XML, JSON) as graph without even storing it\n\nSee \u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/virtual/\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e for more information.\nSome procedures are:\n\n\n\nNote that, to manipulate virtual entities, you cannot use \"classic\" Neo4j statement, but you have to use these:\n- apoc.create.setProperty / apoc.create.setProperties\n- apoc.node.id\n- apoc.node.labels\n- apoc.create.setRelProperty / apoc.create.setRelProperties\n- apoc.rel.type\n- apoc.rel.endNode / apoc.rel.startNode\n- apoc.rel.id\n\nLet\u0027s see some examples:",
      "user": "anonymous",
      "dateUpdated": "2021-11-10 08:18:11.312",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eVIRTUAL ENTITIES\u003c/h1\u003e\n\u003cp\u003eWe can visualize nodes and relationships that don’t exist in the graph but only returned by a query. This could be used for:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ereturn only a few properties of nodes/rels to the visualization, e.g. if you have huge text properties\u003c/li\u003e\n\u003cli\u003eaggregate information to a higher level of abstraction\u003c/li\u003e\n\u003cli\u003evisualization of data from other sources (computation, RDBMS, document-dbs, CSV, XML, JSON) as graph without even storing it\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSee \u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/virtual/\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e for more information.\u003cbr /\u003e\nSome procedures are:\u003c/p\u003e\n\u003cp\u003eNote that, to manipulate virtual entities, you cannot use \u0026ldquo;classic\u0026rdquo; Neo4j statement, but you have to use these:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eapoc.create.setProperty / apoc.create.setProperties\u003c/li\u003e\n\u003cli\u003eapoc.node.id\u003c/li\u003e\n\u003cli\u003eapoc.node.labels\u003c/li\u003e\n\u003cli\u003eapoc.create.setRelProperty / apoc.create.setRelProperties\u003c/li\u003e\n\u003cli\u003eapoc.rel.type\u003c/li\u003e\n\u003cli\u003eapoc.rel.endNode / apoc.rel.startNode\u003c/li\u003e\n\u003cli\u003eapoc.rel.id\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLet\u0026rsquo;s see some examples:\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636129873062_1526049960",
      "id": "paragraph_1636129873062_1526049960",
      "dateCreated": "2021-11-05 16:31:13.062",
      "dateStarted": "2021-11-09 11:30:49.600",
      "dateFinished": "2021-11-09 11:30:49.647",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\n/* \nvisualize a graph from this csv file:\n    name,surname\n    Eren,Jager\n    Mikasa,Ackermann\n    Armin,Arelet  \n*/\n\n\n// we can use CALL apoc.create.vNode(labels, propertyMap)\n\nCALL apoc.load.csv(\"persons.csv\") YIELD map \n// we retrieve the csv as a row of maps, so {\"name\":\"Eren\", \"surname\": \"Jager\"} , {\"name\": \"Mikasa\", \"surname\": \"Ackermann\"}, {\"name\": \"Armin\", \"surname\": \"Arelet\"}\nWITH map \nCALL apoc.create.vNode([\u0027Person\u0027], map) // we create 2 virtual nodes from csv\nYIELD node\nRETURN node",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:49.700",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "summary": "string",
                      "_start": "string",
                      "born": "string",
                      "roles": "string",
                      "_type": "string",
                      "rating": "string",
                      "title": "string",
                      "_end": "string",
                      "children": "string",
                      "unique": "string",
                      "name": "string",
                      "tagline": "string",
                      "_id": "string",
                      "_labels": "string",
                      "released": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "editOnDblClick": false,
          "language": "text",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":-13,\"data\":{\"name\":\"Eren\",\"surname\":\"Jager\"},\"label\":\"Person\"},{\"id\":-14,\"data\":{\"name\":\"Mikasa\",\"surname\":\"Ackermann\"},\"label\":\"Person\"},{\"id\":-15,\"data\":{\"name\":\"Armin\",\"surname\":\"Arelet \"},\"label\":\"Person\"}],\"edges\":[],\"labels\":{\"TTL\":\"#2EC610\"},\"types\":[],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636293811647_1694047595",
      "id": "paragraph_1636293811647_1694047595",
      "dateCreated": "2021-11-07 14:03:31.647",
      "dateStarted": "2021-11-09 11:30:49.757",
      "dateFinished": "2021-11-09 11:30:49.819",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\nSee examples below on Neo4j Browser (currently virtual node are supported only here)\n\n```\nCALL apoc.graph.fromDocument(\"{\u0027id\u0027: 1,\u0027type\u0027: \u0027artist\u0027,\u0027name\u0027:\u0027Genesis\u0027,\u0027members\u0027: [\u0027Tony Banks\u0027,\u0027Mike Rutherford\u0027,\u0027Phil Collins\u0027],\u0027years\u0027: [1967, 1998, 1999, 2000, 2006],\u0027albums\u0027: [{\u0027type\u0027: \u0027album\u0027,\u0027id\u0027: 1,\u0027producer\u0027: \u0027Jonathan King\u0027,\u0027title\u0027: \u0027From Genesis to Revelation\u0027}]}\", {write: false})\nYIELD graph AS g RETURN graph;\n```\n\n```\nMATCH (p:Person)-[r:ACTED_IN]-\u003e(m:Movie)\nWITH collect(m) + collect(p) AS nodes, collect(r) AS relationships\nCALL apoc.graph.fromData(nodes, relationships, \"movies\", {})\nYIELD graph RETURN graph\n```",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:49.857",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "g.name": "string",
                      "g.relationships": "string",
                      "g.nodes": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eSee examples below on Neo4j Browser (currently virtual node are supported only here)\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCALL apoc.graph.fromDocument(\u0026quot;{\u0027id\u0027: 1,\u0027type\u0027: \u0027artist\u0027,\u0027name\u0027:\u0027Genesis\u0027,\u0027members\u0027: [\u0027Tony Banks\u0027,\u0027Mike Rutherford\u0027,\u0027Phil Collins\u0027],\u0027years\u0027: [1967, 1998, 1999, 2000, 2006],\u0027albums\u0027: [{\u0027type\u0027: \u0027album\u0027,\u0027id\u0027: 1,\u0027producer\u0027: \u0027Jonathan King\u0027,\u0027title\u0027: \u0027From Genesis to Revelation\u0027}]}\u0026quot;, {write: false})\nYIELD graph AS g RETURN graph;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cpre\u003e\u003ccode\u003eMATCH (p:Person)-[r:ACTED_IN]-\u0026gt;(m:Movie)\nWITH collect(m) + collect(p) AS nodes, collect(r) AS relationships\nCALL apoc.graph.fromData(nodes, relationships, \u0026quot;movies\u0026quot;, {})\nYIELD graph RETURN graph\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636410023554_543090524",
      "id": "paragraph_1636410023554_543090524",
      "dateCreated": "2021-11-08 22:20:23.554",
      "dateStarted": "2021-11-09 11:30:49.884",
      "dateFinished": "2021-11-09 11:30:49.901",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## System database\n\nWith introduction of system database concept in neo4j 4.0, Apoc introduces a procedure to see a virtual graph visualization of system entities\n\n\u003cpre\u003e\nCALL apoc.systemdb.graph() [see this one in Neo4j Desktop]\n\u003c/pre\u003e\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:49.983",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eSystem database\u003c/h2\u003e\n\u003cp\u003eWith introduction of system database concept in neo4j 4.0, Apoc introduces a procedure to see a virtual graph visualization of system entities\u003c/p\u003e\n\u003cpre\u003e\nCALL apoc.systemdb.graph() [see this one in Neo4j Desktop]\n\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636110384368_1627598108",
      "id": "paragraph_1636110384368_1627598108",
      "dateCreated": "2021-11-05 11:06:24.368",
      "dateStarted": "2021-11-09 11:30:50.008",
      "dateFinished": "2021-11-09 11:30:50.024",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Automatic UUID\n\n\nAuto UUID: we can generate uuids when we create a node with specific label, through the procedure:\napoc.uuid.install(\u0027LabelName\u0027, `{configMap}`)\n\n\nSo each new node with this label `LabelName` will have a uuid property.\n\nIn `configMap` parameter we can have the following values:\n- `addToExistingNodes` (adds the UUID to the nodes already existing in your graph),\n- `uuidProperty` (the name of the name of the UUID field, by default is `uuid` )\n\n\nHowever, to create auto uuid we have to add the apoc config `apoc.uuid.enabled\u003dtrue`.\n\nThen, we need to create a unique constraint on label and on property to associate with the uuid (otherwise we receive a `RuntimeException`)\n`CREATE CONSTRAINT ON (person:LabelName) ASSERT person.uuid IS UNIQUE`\n\n\nOther procedures regarding auto uuid:\n\n- CALL apoc.uuid.remove(\u0027LabelName\u0027): To remove a specific auto uuid\n- CALL apoc.uuid.removeAll(): To remove all auto uuids\n- CALL apoc.uuid.list(): To get the list of auto uuids\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:50.109",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eAutomatic UUID\u003c/h2\u003e\n\u003cp\u003eAuto UUID: we can generate uuids when we create a node with specific label, through the procedure:\u003cbr /\u003e\napoc.uuid.install(\u0026lsquo;LabelName\u0026rsquo;, \u003ccode\u003e{configMap}\u003c/code\u003e)\u003c/p\u003e\n\u003cp\u003eSo each new node with this label \u003ccode\u003eLabelName\u003c/code\u003e will have a uuid property.\u003c/p\u003e\n\u003cp\u003eIn \u003ccode\u003econfigMap\u003c/code\u003e parameter we can have the following values:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eaddToExistingNodes\u003c/code\u003e (adds the UUID to the nodes already existing in your graph),\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euuidProperty\u003c/code\u003e (the name of the name of the UUID field, by default is \u003ccode\u003euuid\u003c/code\u003e )\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eHowever, to create auto uuid we have to add the apoc config \u003ccode\u003eapoc.uuid.enabled\u003dtrue\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThen, we need to create a unique constraint on label and on property to associate with the uuid (otherwise we receive a \u003ccode\u003eRuntimeException\u003c/code\u003e)\u003cbr /\u003e\n\u003ccode\u003eCREATE CONSTRAINT ON (person:LabelName) ASSERT person.uuid IS UNIQUE\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eOther procedures regarding auto uuid:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCALL apoc.uuid.remove(\u0026lsquo;LabelName\u0026rsquo;): To remove a specific auto uuid\u003c/li\u003e\n\u003cli\u003eCALL apoc.uuid.removeAll(): To remove all auto uuids\u003c/li\u003e\n\u003cli\u003eCALL apoc.uuid.list(): To get the list of auto uuids\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635868849395_339438832",
      "id": "paragraph_1635868849395_339438832",
      "dateCreated": "2021-11-02 16:00:49.395",
      "dateStarted": "2021-11-09 11:30:50.187",
      "dateFinished": "2021-11-09 11:30:50.226",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n// Firstly we create the constraint\nCREATE CONSTRAINT ON (node:NodeWithUnique) ASSERT node.omega IS UNIQUE;\n\nCALL apoc.uuid.install(\u0027NodeWithUnique\u0027, {uuidProperty: \u0027omega\u0027});",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:50.283",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "batchComputationResult.committedOperations": "string",
                      "batchComputationResult.batch.total": "string",
                      "batchComputationResult.batch.committed": "string",
                      "batchComputationResult.batch.failed": "string",
                      "batchComputationResult.wasTerminated": "string",
                      "batchComputationResult.batches": "string",
                      "batchComputationResult.timeTaken": "string",
                      "batchComputationResult.retries": "string",
                      "batchComputationResult.total": "string",
                      "batchComputationResult.operations.total": "string",
                      "batchComputationResult.operations.committed": "string",
                      "batchComputationResult.operations.failed": "string",
                      "batchComputationResult.failedOperations": "string",
                      "batchComputationResult.updateStatistics.nodesDeleted": "string",
                      "batchComputationResult.updateStatistics.labelsAdded": "string",
                      "batchComputationResult.updateStatistics.relationshipsCreated": "string",
                      "batchComputationResult.updateStatistics.nodesCreated": "string",
                      "batchComputationResult.updateStatistics.propertiesSet": "string",
                      "batchComputationResult.updateStatistics.relationshipsDeleted": "string",
                      "batchComputationResult.updateStatistics.labelsRemoved": "string",
                      "batchComputationResult.failedBatches": "string",
                      "label": "string",
                      "installed": "string",
                      "properties.uuidProperty": "string",
                      "properties.addToSetLabels": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": false,
          "language": "text",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "batchComputationResult.committedOperations\tbatchComputationResult.batch.total\tbatchComputationResult.batch.committed\tbatchComputationResult.batch.failed\tbatchComputationResult.wasTerminated\tbatchComputationResult.batches\tbatchComputationResult.timeTaken\tbatchComputationResult.retries\tbatchComputationResult.total\tbatchComputationResult.operations.total\tbatchComputationResult.operations.committed\tbatchComputationResult.operations.failed\tbatchComputationResult.failedOperations\tbatchComputationResult.updateStatistics.nodesDeleted\tbatchComputationResult.updateStatistics.labelsAdded\tbatchComputationResult.updateStatistics.relationshipsCreated\tbatchComputationResult.updateStatistics.nodesCreated\tbatchComputationResult.updateStatistics.propertiesSet\tbatchComputationResult.updateStatistics.relationshipsDeleted\tbatchComputationResult.updateStatistics.labelsRemoved\tbatchComputationResult.failedBatches\tlabel\tinstalled\tproperties.uuidProperty\tproperties.addToSetLabels\n0\t1\t1\t0\tfalse\t1\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t\"NodeWithUnique\"\tTRUE\tomega\tfalse\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635868931436_15761564",
      "id": "paragraph_1635868931436_15761564",
      "dateCreated": "2021-11-02 16:02:11.436",
      "dateStarted": "2021-11-09 11:30:50.315",
      "dateFinished": "2021-11-09 11:30:52.297",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nCREATE (n:NodeWithUnique);\n\nMATCH (n:NodeWithUnique) RETURN n;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:52.323",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "omega": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":0,\"data\":{\"omega\":\"16c9a187-ee4e-4a56-926c-263b4a1d6618\"},\"label\":\"NodeWithUnique\"}],\"edges\":[],\"labels\":{\"TTL\":\"#2EC610\",\"NodeWithUnique\":\"#B8C858\"},\"types\":[],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635868938917_1994016294",
      "id": "paragraph_1635868938917_1994016294",
      "dateCreated": "2021-11-02 16:02:18.918",
      "dateStarted": "2021-11-09 11:30:52.359",
      "dateFinished": "2021-11-09 11:30:52.671",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Static values\n\nThe Apoc provides support for storing and retrieving static values, functionality that can be used to work with API credentials or cache query results.\n\n\nTo store a value, we can set settings into Apoc config, starting with `apoc.static` prefix. For example:\n```\napoc.static.mystore.id\u003dq123e456t\napoc.static.mystore.url\u003dhttps://api.twitter.com/1.1/search/tweets.json?count\u003d100\u0026result_type\u003drecent\u0026lang\u003den\u0026q\u003d\n```\n\nor using the following procedure:\n```\nCALL apoc.static.set(\"mystore.user\", \"asd\")\n```\n\n.The following returns the `apoc.static.twitter.bearer` value, so \u0027q123e456t\u0027:\n```\nRETURN apoc.static.get(\"twitter.bearer\") AS value\n```\n\n\nThe following returns all values with the `mystore` prefix: `RETURN apoc.static.getAll(\"twitter\")`\n\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:52.760",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eStatic values\u003c/h2\u003e\n\u003cp\u003eThe Apoc provides support for storing and retrieving static values, functionality that can be used to work with API credentials or cache query results.\u003c/p\u003e\n\u003cp\u003eTo store a value, we can set settings into Apoc config, starting with \u003ccode\u003eapoc.static\u003c/code\u003e prefix. For example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapoc.static.mystore.id\u003dq123e456t\napoc.static.mystore.url\u003dhttps://api.twitter.com/1.1/search/tweets.json?count\u003d100\u0026amp;result_type\u003drecent\u0026amp;lang\u003den\u0026amp;q\u003d\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eor using the following procedure:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eCALL apoc.static.set(\u0026quot;mystore.user\u0026quot;, \u0026quot;asd\u0026quot;)\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e.The following returns the \u003ccode\u003eapoc.static.twitter.bearer\u003c/code\u003e value, so \u0026lsquo;q123e456t\u0026rsquo;:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eRETURN apoc.static.get(\u0026quot;twitter.bearer\u0026quot;) AS value\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe following returns all values with the \u003ccode\u003emystore\u003c/code\u003e prefix: \u003ccode\u003eRETURN apoc.static.getAll(\u0026quot;twitter\u0026quot;)\u003c/code\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635340803726_1233963523",
      "id": "paragraph_1635340803726_1233963523",
      "dateCreated": "2021-10-27 13:20:03.726",
      "dateStarted": "2021-11-09 11:30:52.798",
      "dateFinished": "2021-11-09 11:30:52.821",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n## Block the query for a while\n\nWe can sleep the query execution through the:\n```\napoc.util.sleep(\u003cduration in milliseconds\u003e)\n```\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:52.896",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eBlock the query for a while\u003c/h2\u003e\n\u003cp\u003eWe can sleep the query execution through the:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapoc.util.sleep(\u0026lt;duration in milliseconds\u0026gt;)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349766818_1822740037",
      "id": "paragraph_1635349766818_1822740037",
      "dateCreated": "2021-10-27 15:49:26.818",
      "dateStarted": "2021-11-09 11:30:52.934",
      "dateFinished": "2021-11-09 11:30:52.952",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\n// we use `apoc.date.format` to get only minutes and seconds from a query\n\nWITH apoc.date.currentTimestamp() as currentTime\nCALL apoc.util.sleep(3000)\nRETURN apoc.date.format(currentTime, \u0027ms\u0027,\u0027mm:ss\u0027) as timeBefore, apoc.date.format(apoc.date.currentTimestamp(), \u0027ms\u0027,\u0027mm:ss\u0027) as timeAfter",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:53.034",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "timeBefore": "string",
                      "timeAfter": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": false,
          "language": "text",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "timeBefore\ttimeAfter\n\"30:53\"\t\"30:56\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635869493908_1027009727",
      "id": "paragraph_1635869493908_1027009727",
      "dateCreated": "2021-11-02 16:11:33.908",
      "dateStarted": "2021-11-09 11:30:53.048",
      "dateFinished": "2021-11-09 11:30:56.261",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n# Time to leave\n\nWe can set to ttl to remove some nodes after a specified time, similar to MongoDb and Redis analogues\n\n\nTo activate it, you have to set the apoc configuration `apoc.ttl.enabled\u003dtrue`.\nOptionally, we can set the chek frequency: `apoc.ttl.schedule\u003d5`\n\n\nFor example (in a specific epoch time):\n\n`CALL apoc.ttl.expire(node,epochTime,time)`\nwhere `time` is one of these: `\u0027ms\u0027, \u0027s\u0027, \u0027m\u0027, \u0027h\u0027, \u0027d\u0027, \u0027millis\u0027, \u0027milliseconds\u0027, \u0027seconds\u0027, \u0027minutes\u0027, \u0027hours\u0027 or \u0027days\u0027`\n\nFor example:\n`MATCH (movie:Movie)\u003c-[produced:PRODUCED]-(person:Person)\n    CALL apoc.ttl.expire(person,1585176720,\u0027s\u0027)\n    RETURN movie, produced, person`\n\nMoreover, i can expire a node after a perion with `apoc.ttl.expireIn` (same syntax as above)\n\n\nHow it works:\n\n- Set the :TTL label and ttl property on the node(s) you want to expire:\n    - SET n:TTL\n    - SET n.ttl \u003d `time selected`\n- Create an index: `CREATE INDEX ON :TTL(ttl)`\n- Remove node(s) that have passed the expiration time:  `MATCH (t:TTL) where t.ttl \u003c timestamp() WITH t LIMIT 1000 DETACH DELETE t`\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-10 10:00:44.280",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eTime to leave\u003c/h1\u003e\n\u003cp\u003eWe can set to ttl to remove some nodes after a specified time, similar to MongoDb and Redis analogues\u003c/p\u003e\n\u003cp\u003eTo activate it, you have to set the apoc configuration \u003ccode\u003eapoc.ttl.enabled\u003dtrue\u003c/code\u003e.\u003cbr /\u003e\nOptionally, we can set the chek frequency: \u003ccode\u003eapoc.ttl.schedule\u003d5\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eFor example (in a specific epoch time), with parameters: \u003ccode\u003enode, epochTime, time unit (ms, s, m, h, d or millis, milliseconds, seconds, minutes, hours, days) )\u003c/code\u003eCALL apoc.ttl.expire(node,epochTime,time)\u003ccode\u003ewhere\u003c/code\u003etime` is one of these: \u0026lsquo;ms\u0026rsquo;, \u0026lsquo;s\u0026rsquo;, \u0026lsquo;m\u0026rsquo;, \u0026lsquo;h\u0026rsquo;, \u0026lsquo;d\u0026rsquo;, \u0026lsquo;millis\u0026rsquo;, \u0026lsquo;milliseconds\u0026rsquo;, \u0026lsquo;seconds\u0026rsquo;, \u0026lsquo;minutes\u0026rsquo;, \u0026lsquo;hours\u0026rsquo; or \u0026lsquo;days\u0026rsquo;\u003c/p\u003e\n\u003cp\u003eFor example:\u003cbr /\u003e\n\u003ccode\u003eMATCH (movie:Movie)\u0026lt;-[produced:PRODUCED]-(person:Person) CALL apoc.ttl.expire(person,1585176720,\u0027s\u0027) RETURN movie, produced, person\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eMoreover, i can expire a node after a perion with \u003ccode\u003eapoc.ttl.expireIn\u003c/code\u003e (same syntax as above)\u003c/p\u003e\n\u003cp\u003eHow it works:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSet the :TTL label and ttl property on the node(s) you want to expire:\n\u003cul\u003e\n\u003cli\u003eSET n:TTL\u003c/li\u003e\n\u003cli\u003eSET n.ttl \u003d \u003ccode\u003etime selected\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eCreate an index: \u003ccode\u003eCREATE INDEX ON :TTL(ttl)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eRemove node(s) that have passed the expiration time:  \u003ccode\u003eMATCH (t:TTL) where t.ttl \u0026lt; timestamp() WITH t LIMIT 1000 DETACH DELETE t\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635870688445_1102628038",
      "id": "paragraph_1635870688445_1102628038",
      "dateCreated": "2021-11-02 16:31:28.445",
      "dateStarted": "2021-11-09 11:30:56.387",
      "dateFinished": "2021-11-09 11:30:56.416",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nCREATE (n:ToRemove) WITH n\nCALL apoc.ttl.expireIn(n, 10,\u0027s\u0027)\nRETURN n;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:56.486",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 144.006,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "ttl": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": false,
          "language": "text",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":1,\"data\":{\"ttl\":1636457466598},\"label\":\"TTL\"}],\"edges\":[],\"labels\":{\"TTL\":\"#2EC610\",\"NodeWithUnique\":\"#B8C858\",\"ToRemove\":\"#0E030C\"},\"types\":[],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635872050501_1981233352",
      "id": "paragraph_1635872050501_1981233352",
      "dateCreated": "2021-11-02 16:54:10.501",
      "dateStarted": "2021-11-09 11:30:56.522",
      "dateFinished": "2021-11-09 11:30:56.644",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nMATCH (n:ToRemove) RETURN n;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:56.723",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 94.0057,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "ttl": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":1,\"data\":{\"ttl\":1636457466598},\"label\":\"TTL\"}],\"edges\":[],\"labels\":{\"TTL\":\"#2EC610\",\"NodeWithUnique\":\"#B8C858\",\"ToRemove\":\"#0E030C\"},\"types\":[],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635872225286_1576254618",
      "id": "paragraph_1635872225286_1576254618",
      "dateCreated": "2021-11-02 16:57:05.287",
      "dateStarted": "2021-11-09 11:30:56.776",
      "dateFinished": "2021-11-09 11:30:56.843",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n# Schema operations\n\nTo drop or create index or constraint, you can use the following procedure:\n\n- apoc.schema.assert(mapIndexes, mapConstraint, dropExisting) - To create indexes and constraint at once. With `dropExisting` true we drop existing indexes/constraints.\n- apoc.schema.nodes / apoc.schema.relationships - To get nodes / relationships indexes\n- apoc.schema.node.constraintExists\n- apoc.schema.relationship.constraintExists\n- apoc.schema.node.indexExists\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-10 09:24:40.386",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eSchema operations\u003c/h1\u003e\n\u003cp\u003eTo drop or create index or constraint, you can use the following procedure:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eapoc.schema.assert(mapIndexes, mapConstraint, dropExisting) - To create indexes and constraint at once. With \u003ccode\u003edropExisting\u003c/code\u003e true we drop existing indexes/constraints.\u003c/li\u003e\n\u003cli\u003eapoc.schema.nodes / apoc.schema.relationships - To get nodes / relationships indexes\u003c/li\u003e\n\u003cli\u003eapoc.schema.node.constraintExists\u003c/li\u003e\n\u003cli\u003eapoc.schema.relationship.constraintExists\u003c/li\u003e\n\u003cli\u003eapoc.schema.node.indexExists\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635376095899_1541463143",
      "id": "paragraph_1635376095899_1541463143",
      "dateCreated": "2021-10-27 23:08:15.899",
      "dateStarted": "2021-11-10 09:24:40.388",
      "dateFinished": "2021-11-10 09:24:40.433",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nCALL apoc.schema.assert({Person:[\u0027name\u0027]}, {Movie: [\"title\"]}, true)\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-10 08:26:18.397",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "label": "string",
                      "key": "string",
                      "keys": "string",
                      "unique": "string",
                      "action": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": false,
          "language": "text",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "label\tkey\tkeys\tunique\taction\n\"TTL\"\t\"ttl\"\t[\"ttl\"]\tFALSE\t\"DROPPED\"\n\"Movie\"\t\"title\"\t[\"title\"]\tFALSE\t\"DROPPED\"\n\"Person\"\t\"name\"\t[\"name\"]\tFALSE\t\"CREATED\"\n\"Genre\"\t\"name\"\t[\"name\"]\tTRUE\t\"DROPPED\"\n\"NodeWithUnique\"\t\"omega\"\t[\"omega\"]\tTRUE\t\"DROPPED\"\n\"TagLine\"\t\"name\"\t[\"name\"]\tTRUE\t\"DROPPED\"\n\"Movie\"\t\"title\"\t[\"title\"]\tTRUE\t\"CREATED\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636532662677_401422741",
      "id": "paragraph_1636532662677_401422741",
      "dateCreated": "2021-11-10 08:24:22.677",
      "dateStarted": "2021-11-10 08:26:17.409",
      "dateFinished": "2021-11-10 08:26:17.791",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nRETURN apoc.schema.node.constraintExists(\"Movie\", [\"title\"])\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-10 08:26:25.790",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "apoc.schema.node.constraintExists(\"Movie\", [\"title\"])": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": false,
          "language": "text",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "apoc.schema.node.constraintExists(\"Movie\", [\"title\"])\nTRUE\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636532704343_2097459738",
      "id": "paragraph_1636532704343_2097459738",
      "dateCreated": "2021-11-10 08:25:04.343",
      "dateStarted": "2021-11-10 08:26:25.254",
      "dateFinished": "2021-11-10 08:26:25.296",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nCALL apoc.schema.nodes()",
      "user": "anonymous",
      "dateUpdated": "2021-11-10 08:26:29.606",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "name": "string",
                      "label": "string",
                      "properties": "string",
                      "status": "string",
                      "type": "string",
                      "failure": "string",
                      "populationProgress": "string",
                      "size": "string",
                      "valuesSelectivity": "string",
                      "userDescription": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "editOnDblClick": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "name\tlabel\tproperties\tstatus\ttype\tfailure\tpopulationProgress\tsize\tvaluesSelectivity\tuserDescription\n\":Movie(title)\"\t\"Movie\"\t[\"title\"]\t\"ONLINE\"\t\"UNIQUENESS\"\t\"NO FAILURE\"\t100.0\t38\t1.0\t\"Index( id\u003d12, name\u003d\u0027constraint_3044d997\u0027, type\u003d\u0027UNIQUE BTREE\u0027, schema\u003d(:Movie {title}), indexProvider\u003d\u0027native-btree-1.0\u0027, owningConstraint\u003d13 )\"\n\":Person(name)\"\t\"Person\"\t[\"name\"]\t\"ONLINE\"\t\"INDEX\"\t\"NO FAILURE\"\t100.0\t141\t0.9787234042553191\t\"Index( id\u003d11, name\u003d\u0027index_5c0607ad\u0027, type\u003d\u0027GENERAL BTREE\u0027, schema\u003d(:Person {name}), indexProvider\u003d\u0027native-btree-1.0\u0027 )\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636532750579_2013459649",
      "id": "paragraph_1636532750579_2013459649",
      "dateCreated": "2021-11-10 08:25:50.580",
      "dateStarted": "2021-11-10 08:26:28.877",
      "dateFinished": "2021-11-10 08:26:28.945",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Cypher initializer\n\nTo run cypher commands after database initialization is finished:\n\n```\napoc.initializer.\u003cdatabase_name\u003e.\u003cidentifier\u003e \u003d \u003ccypher\u003e\n```\n\nwhere `identifier` is a number (to order statements), for example `apoc.initializer.neo4j.0\u003dCREATE (:Person{name:\u0027bar\u0027})`",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:57.140",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCypher initializer\u003c/h2\u003e\n\u003cp\u003eTo run cypher commands after database initialization is finished:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eapoc.initializer.\u0026lt;database_name\u0026gt;.\u0026lt;identifier\u0026gt; \u003d \u0026lt;cypher\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003ewhere \u003ccode\u003eidentifier\u003c/code\u003e is a number (to order statements), for example \u003ccode\u003eapoc.initializer.neo4j.0\u003dCREATE (:Person{name:\u0027bar\u0027})\u003c/code\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636130663479_1194669185",
      "id": "paragraph_1636130663479_1194669185",
      "dateCreated": "2021-11-05 16:44:23.479",
      "dateStarted": "2021-11-09 11:30:57.242",
      "dateFinished": "2021-11-09 11:30:57.265",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n# Database interactions\n\nWe can execute read / write operations in other database:\n\n- Jdbc (apoc.load.jdbc)\n- Elastic search (load.es.*)\n- MongoDb (apoc.mongo.*)\n- Redis (apoc.redis.*)\n- Couchbase (apoc.couchbase.*)\n- Load Ldap (apoc.load.ldap)\n- Bolt (apoc.bolt.*) - To connect to other Neo4j instances\n\nEvery procedure has oviously a different implementation to interface with databases.\nYou can see \u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/database-integration\" target\u003d\"_blank\"\u003ethis page\u003c/a\u003e for more details.\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-10 10:11:27.627",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eDatabase interactions\u003c/h1\u003e\n\u003cp\u003eWe can execute read / write operations in other database:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJdbc (apoc.load.jdbc)\u003c/li\u003e\n\u003cli\u003eElastic search (load.es.*)\u003c/li\u003e\n\u003cli\u003eMongoDb (apoc.mongo.*)\u003c/li\u003e\n\u003cli\u003eRedis (apoc.redis.*)\u003c/li\u003e\n\u003cli\u003eCouchbase (apoc.couchbase.*)\u003c/li\u003e\n\u003cli\u003eLoad Ldap (apoc.load.ldap)\u003c/li\u003e\n\u003cli\u003eBolt (apoc.bolt.*) - To connect to other Neo4j instances\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEvery procedure has oviously a different implementation to interface with databases.\u003cbr /\u003e\nYou can see \u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/database-integration\" target\u003d\"_blank\"\u003ethis page\u003c/a\u003e for more details.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635436437219_504267999",
      "id": "paragraph_1635436437219_504267999",
      "dateCreated": "2021-10-28 15:53:57.219",
      "dateStarted": "2021-11-10 10:11:27.627",
      "dateFinished": "2021-11-10 10:11:27.641",
      "status": "FINISHED"
    },
    {
      "text": "%md\n## Conclusions\n\n\u003cpre\u003e\nThis guide is based on Apoc 4.3.x. In other versions some procedures / functions could be a little different\n\u003c/pre\u003e\n\nSee \u003ca href\u003d\"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e to get updated about last changes.\n\nVisit the \u003ca href\u003d\"https://community.neo4j.com/\" target\u003d\"_blank\"\u003eNeo4j Community\u003c/a\u003e to get help.\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-10 10:10:43.857",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eConclusions\u003c/h2\u003e\n\u003cpre\u003e\nThis guide is based on Apoc 4.3.x. In other versions some procedures / functions could be a little different\n\u003c/pre\u003e\n\u003cp\u003eSee \u003ca href\u003d\"https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e to get updated about last changes.\u003c/p\u003e\n\u003cp\u003eVisit the \u003ca href\u003d\"https://community.neo4j.com/\" target\u003d\"_blank\"\u003eNeo4j Community\u003c/a\u003e to get help.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636298465103_1913554570",
      "id": "paragraph_1636298465103_1913554570",
      "dateCreated": "2021-11-07 15:21:05.103",
      "dateStarted": "2021-11-10 10:10:43.857",
      "dateFinished": "2021-11-10 10:10:43.875",
      "status": "FINISHED"
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:30:57.618",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "editOnDblClick": true,
          "language": "markdown",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636298473187_1917983",
      "id": "paragraph_1636298473187_1917983",
      "dateCreated": "2021-11-07 15:21:13.187",
      "status": "FINISHED"
    }
  ],
  "name": "9. Others",
  "id": "2GK4BTA5G",
  "defaultInterpreterGroup": "neo4j",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}