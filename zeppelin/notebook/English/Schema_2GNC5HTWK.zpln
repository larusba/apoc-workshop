{
  "paragraphs": [
    {
      "text": "\u003d\u003d SCHEMA operations\n\n\n\nTo drop or create index or constraint, you can use the following procedure:\n\n[separator\u003d¦,opts\u003dheader,cols\u003d\"5,1m,1m\"]\n|\u003d\u003d\u003d\n¦Qualified Name¦Type¦Release\ninclude::example$generated-documentation/apoc.schema.assert.adoc[]\ninclude::example$generated-documentation/apoc.schema.nodes.adoc[]\ninclude::example$generated-documentation/apoc.schema.relationships.adoc[]\ninclude::example$generated-documentation/apoc.schema.node.constraintExists.adoc[]\ninclude::example$generated-documentation/apoc.schema.relationship.constraintExists.adoc[]\ninclude::example$generated-documentation/apoc.schema.node.indexExists.adoc[]\n|\u003d\u003d\u003d\n\n[source,cypher]\n----\nCALL apoc.schema.assert({indexLabel:[[indexKeys]], ...}, {constraintLabel:[constraintKeys], ...}, dropExisting : true)\nYIELD label, key, keys, unique, action\n----\n\nWhere the outputs are:\n\n* label\n* key\n* keys, list of the key\n* unique, if the index or constraint are unique\n* action, can be the following values: DROPPED, CREATED\n\nTo retrieve indexes and constraints information for all the node labels in your database, you can use the following procedure:\n\n[source,cypher]\n----\nCALL apoc.schema.nodes()\nYIELD name, label, properties, status, type\n----\n\nWhere the outputs are:\n\n* name of the index/constraint,\n* label\n* properties, (for Neo4j 3.1 and lower versions is a single element array) that are affected by the constraint\n* status, for index can be one of the following values: ONLINE, POPULATING and FAILED\n* type, always \"INDEX\" for indexes, constraint type for constraints\n* failure, the failure description of a failed index\n* populationProgress, the population progress of the index in percentage\n* size, the size of the index\n* valuesSelectivity, computes the selectivity of the unique values\n* userDescription, a user friendly description of what this index indexes\n\nTo retrieve the constraint information for all the relationship types in your database, you can use the following procedure:\n\n[source,cypher]\n----\nCALL apoc.schema.relationships()\nYIELD name, type, properties, status\n----\n\nWhere the outputs are:\n\n* name of the constraint\n* type of the relationship\n* properties, (for Neo4j 3.1 and lower versions is a single element array) that are affected by the constraint\n* status\n\nConfig optional param is a map and its possible values are:\n\n* labels : list of labels to retrieve index/constraint information\n* excludeLabels: list of labels to exclude from retrieve index/constraint information\n* relationships: list of relationships type to retrieve constraint information\n* excludeRelationships: list of relationships\u0027 type to exclude from retrieve constraint information\n\n**Exclude has more power than include, so if excludeLabels and labels are both valued, procedure considers excludeLabels only, the same for relationships.**\n\n[source,cypher]\n----\nCALL apoc.schema.nodes({labels:[\u0027Book\u0027]})\nYIELD name, label, properties, status, type\n----\n\n\nN.B. Constraints for property existence on nodes and relationships are available only for the Enterprise Edition.\n\nTo retrieve the index existence on node, you can use the following user function:\n\n[source,cypher]\n----\nRETURN apoc.schema.node.indexExists(labelName, propertyNames)\n\n----\n\nThe output return the index existence on node is present or not\n\nTo retrieve if the constraint exists on node, you can use the following user function:\n\n[source,cypher]\n----\nRETURN apoc.schema.node.constraintExists(labelName, propertyNames)\n----\n\nThe output return the constraint existence on node.\n\nTo retrieve if the constraint exists on relationship, you can use the following user function:\n\n[source,cypher]\n----\nRETURN apoc.schema.relationship.constraintExists(type, propertyNames)\n----\n\nThe output return the constraint on the relationship is present or not\n\n\n\u003d\u003d\u003d Examples\n\n\u003d\u003d\u003d List Schema assert\n\nWhen you:\n\n[source,cypher]\n----\nCALL apoc.schema.assert({Foo:[\u0027bar\u0027]},null)\n----\n\nyou will receive this result:\n\nimage::apoc.schema.assert.index.png[scaledwidth\u003d\"100%\"]\n\nWhen you:\n\n[source,cypher]\n----\nCALL apoc.schema.assert(null,{Foo:[\u0027bar\u0027]})\n----\n\nyou will receive this result:\n\nimage::apoc.schema.assert.constraint.png[scaledwidth\u003d\"100%\"]\n\nWhen you:\n\n[source,cypher]\n----\nCALL apoc.schema.assert(null,null)\n----\n\nyou will receive this result:\n\nimage::apoc.schema.assert.drop.png[scaledwidth\u003d\"100%\"]\n\n\n\u003d\u003d\u003d List indexes and constraints for nodes\n\nGiven the following cypher statements:\n\n[source,cypher]\n----\nCREATE CONSTRAINT ON (bar:Bar) ASSERT exists(bar.foobar)\nCREATE CONSTRAINT ON (bar:Bar) ASSERT bar.foo IS UNIQUE\nCREATE INDEX ON :Person(name)\nCREATE INDEX ON :Publication(name)\nCREATE INDEX ON :Source(name)\n----\n\nWhen you\n\n[source,cypher]\n----\nCALL apoc.schema.nodes()\n----\n\n\nyou will receive this result:\n\nimage::apoc.schema.nodes.png[scaledwidth\u003d\"100%\"]\n\n\u003d\u003d\u003d List constraints for relationships\n\nGiven the following cypher statements:\n\n[source,cypher]\n----\nCREATE CONSTRAINT ON ()-[like:LIKED]-() ASSERT exists(like.day)\nCREATE CONSTRAINT ON ()-[starred:STARRED]-() ASSERT exists(starred.month)\n----\n\nWhen you\n\n[source,cypher]\n----\nCALL apoc.schema.relationships()\n----\n\nyou will receive this result:\n\nimage::apoc.schema.relationships.png[scaledwidth\u003d\"100%\"]\n\n\u003d\u003d\u003d Check if an index or a constraint exists for a Label and property\n\nGiven the previous index definitions, running this statement:\n\n[source,cypher]\n----\nRETURN apoc.schema.node.indexExists(\"Publication\", [\"name\"])\n----\nproduces the following output:\n\nimage::apoc.schema.node.indexExists.png[scaledwidth\u003d\"100%\"]\n\n\nGiven the previous constraint definitions, running this statement:\n\n[source,cypher]\n----\nRETURN apoc.schema.node.constraintExists(\"Bar\", [\"foobar\"])\n----\nproduces the following output:\n\nimage::apoc.schema.node.constraintExists.png[scaledwidth\u003d\"100%\"]\n\nIf you want to check if a constraint exists for a relationship you can run this statement:\n\n[source,cypher]\n----\nRETURN apoc.schema.relationship.constraintExists(\u0027LIKED\u0027, [\u0027day\u0027])\n----\n\nand you get the following result:\n\nimage::apoc.schema.relationship.constraintExists.png[scaledwidth\u003d\"100%\"]\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:42:01.819",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "ERROR",
        "msg": [
          {
            "type": "TEXT",
            "data": "\u003cconsole\u003e:5: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\nTo drop or create index or constraint, you can use the following procedure:\n                                     ^\n\u003cconsole\u003e:10: \u001b[31merror: \u001b[0midentifier expected but \u0027]\u0027 found.\ninclude::example$generated-documentation/apoc.schema.assert.adoc[]\n                                                                 ^\n\u003cconsole\u003e:11: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027;\u0027 found.\ninclude::example$generated-documentation/apoc.schema.nodes.adoc[]\n^\n\u003cconsole\u003e:11: \u001b[31merror: \u001b[0midentifier expected but \u0027]\u0027 found.\ninclude::example$generated-documentation/apoc.schema.nodes.adoc[]\n                                                                ^\n\u003cconsole\u003e:12: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027;\u0027 found.\ninclude::example$generated-documentation/apoc.schema.relationships.adoc[]\n^\n\u003cconsole\u003e:12: \u001b[31merror: \u001b[0midentifier expected but \u0027]\u0027 found.\ninclude::example$generated-documentation/apoc.schema.relationships.adoc[]\n                                                                        ^\n\u003cconsole\u003e:13: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027;\u0027 found.\ninclude::example$generated-documentation/apoc.schema.node.constraintExists.adoc[]\n^\n\u003cconsole\u003e:13: \u001b[31merror: \u001b[0midentifier expected but \u0027]\u0027 found.\ninclude::example$generated-documentation/apoc.schema.node.constraintExists.adoc[]\n                                                                                ^\n\u003cconsole\u003e:14: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027;\u0027 found.\ninclude::example$generated-documentation/apoc.schema.relationship.constraintExists.adoc[]\n^\n\u003cconsole\u003e:14: \u001b[31merror: \u001b[0midentifier expected but \u0027]\u0027 found.\ninclude::example$generated-documentation/apoc.schema.relationship.constraintExists.adoc[]\n                                                                                        ^\n\u003cconsole\u003e:15: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027;\u0027 found.\ninclude::example$generated-documentation/apoc.schema.node.indexExists.adoc[]\n^\n\u003cconsole\u003e:15: \u001b[31merror: \u001b[0midentifier expected but \u0027]\u0027 found.\ninclude::example$generated-documentation/apoc.schema.node.indexExists.adoc[]\n                                                                           ^\n\u003cconsole\u003e:16: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027;\u0027 found.\n|\u003d\u003d\u003d\n^\n\u003cconsole\u003e:20: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.assert({indexLabel:[[indexKeys]], ...}, {constraintLabel:[constraintKeys], ...}, dropExisting : true)\n         ^\n\u003cconsole\u003e:21: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\nYIELD label, key, keys, unique, action\n           ^\n\u003cconsole\u003e:28: \u001b[31merror: \u001b[0midentifier expected but \u0027,\u0027 found.\n* keys, list of the key\n      ^\n\u003cconsole\u003e:29: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* unique, if the index or constraint are unique\n        ^\n\u003cconsole\u003e:30: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* action, can be the following values: DROPPED, CREATED\n        ^\n\u003cconsole\u003e:32: \u001b[31merror: \u001b[0millegal start of simple expression\nTo retrieve indexes and constraints information for all the node labels in your database, you can use the following procedure:\n                                                ^\n\u003cconsole\u003e:36: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.nodes()\n         ^\n\u003cconsole\u003e:37: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\nYIELD name, label, properties, status, type\n          ^\n\u003cconsole\u003e:42: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* name of the index/constraint,\n                              ^\n\u003cconsole\u003e:44: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* properties, (for Neo4j 3.1 and lower versions is a single element array) that are affected by the constraint\n            ^\n\u003cconsole\u003e:45: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* status, for index can be one of the following values: ONLINE, POPULATING and FAILED\n        ^\n\u003cconsole\u003e:46: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027type\u0027 found.\n* type, always \"INDEX\" for indexes, constraint type for constraints\n  ^\n\u003cconsole\u003e:47: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* failure, the failure description of a failed index\n         ^\n\u003cconsole\u003e:48: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* populationProgress, the population progress of the index in percentage\n                    ^\n\u003cconsole\u003e:49: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* size, the size of the index\n      ^\n\u003cconsole\u003e:50: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* valuesSelectivity, computes the selectivity of the unique values\n                   ^\n\u003cconsole\u003e:51: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* userDescription, a user friendly description of what this index indexes\n                 ^\n\u003cconsole\u003e:53: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027for\u0027 found.\nTo retrieve the constraint information for all the relationship types in your database, you can use the following procedure:\n                                       ^\n\u003cconsole\u003e:57: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.relationships()\n         ^\n\u003cconsole\u003e:58: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\nYIELD name, type, properties, status\n          ^\n\u003cconsole\u003e:64: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027type\u0027 found.\n* type of the relationship\n  ^\n\u003cconsole\u003e:65: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n* properties, (for Neo4j 3.1 and lower versions is a single element array) that are affected by the constraint\n            ^\n\u003cconsole\u003e:70: \u001b[31merror: \u001b[0midentifier expected but \u0027:\u0027 found.\n* labels : list of labels to retrieve index/constraint information\n         ^\n\u003cconsole\u003e:72: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027type\u0027 found.\n* relationships: list of relationships type to retrieve constraint information\n                                       ^\n\u003cconsole\u003e:73: \u001b[31merror: \u001b[0munclosed character literal\n* excludeRelationships: list of relationships\u0027 type to exclude from retrieve constraint information\n                                             ^\n\u003cconsole\u003e:75: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\n**Exclude has more power than include, so if excludeLabels and labels are both valued, procedure considers excludeLabels only, the same for relationships.**\n                                     ^\n\u003cconsole\u003e:79: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.nodes({labels:[\u0027Book\u0027]})\n         ^\n\u003cconsole\u003e:79: \u001b[31merror: \u001b[0munclosed character literal\nCALL apoc.schema.nodes({labels:[\u0027Book\u0027]})\n                                     ^\n\u003cconsole\u003e:80: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\nYIELD name, label, properties, status, type\n          ^\n\u003cconsole\u003e:84: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027for\u0027 found.\nN.B. Constraints for property existence on nodes and relationships are available only for the Enterprise Edition.\n                 ^\n\u003cconsole\u003e:90: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nRETURN apoc.schema.node.indexExists(labelName, propertyNames)\n           ^\n\u003cconsole\u003e:94: \u001b[31merror: \u001b[0millegal start of simple expression\nThe output return the index existence on node is present or not\n           ^\n\u003cconsole\u003e:96: \u001b[31merror: \u001b[0millegal start of simple expression\nTo retrieve if the constraint exists on node, you can use the following user function:\n            ^\n\u003cconsole\u003e:100: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nRETURN apoc.schema.node.constraintExists(labelName, propertyNames)\n           ^\n\u003cconsole\u003e:103: \u001b[31merror: \u001b[0millegal start of simple expression\nThe output return the constraint existence on node.\n           ^\n\u003cconsole\u003e:109: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nRETURN apoc.schema.relationship.constraintExists(type, propertyNames)\n           ^\n\u003cconsole\u003e:112: \u001b[31merror: \u001b[0millegal start of simple expression\nThe output return the constraint on the relationship is present or not\n           ^\n\u003cconsole\u003e:121: \u001b[31merror: \u001b[0midentifier expected but \u0027[\u0027 found.\n[source,cypher]\n^\n\u003cconsole\u003e:123: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.assert({Foo:[\u0027bar\u0027]},null)\n         ^\n\u003cconsole\u003e:123: \u001b[31merror: \u001b[0munclosed character literal\nCALL apoc.schema.assert({Foo:[\u0027bar\u0027]},null)\n                                  ^\n\u003cconsole\u003e:126: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027this\u0027 found.\nyou will receive this result:\n                 ^\n\u003cconsole\u003e:132: \u001b[31merror: \u001b[0midentifier expected but \u0027[\u0027 found.\n[source,cypher]\n^\n\u003cconsole\u003e:134: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.assert(null,{Foo:[\u0027bar\u0027]})\n         ^\n\u003cconsole\u003e:134: \u001b[31merror: \u001b[0munclosed character literal\nCALL apoc.schema.assert(null,{Foo:[\u0027bar\u0027]})\n                                       ^\n\u003cconsole\u003e:137: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027this\u0027 found.\nyou will receive this result:\n                 ^\n\u003cconsole\u003e:143: \u001b[31merror: \u001b[0midentifier expected but \u0027[\u0027 found.\n[source,cypher]\n^\n\u003cconsole\u003e:145: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.assert(null,null)\n         ^\n\u003cconsole\u003e:148: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027this\u0027 found.\nyou will receive this result:\n                 ^\n\u003cconsole\u003e:153: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027for\u0027 found.\n\u003d\u003d\u003d List indexes and constraints for nodes\n                                 ^\n\u003cconsole\u003e:157: \u001b[31merror: \u001b[0midentifier expected but \u0027[\u0027 found.\n[source,cypher]\n^\n\u003cconsole\u003e:161: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027(\u0027 found.\nCREATE INDEX ON :Person(name)\n                       ^\n\u003cconsole\u003e:162: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027(\u0027 found.\nCREATE INDEX ON :Publication(name)\n                            ^\n\u003cconsole\u003e:163: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027(\u0027 found.\nCREATE INDEX ON :Source(name)\n                       ^\n\u003cconsole\u003e:170: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.nodes()\n         ^\n\u003cconsole\u003e:174: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027this\u0027 found.\nyou will receive this result:\n                 ^\n\u003cconsole\u003e:178: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027for\u0027 found.\n\u003d\u003d\u003d List constraints for relationships\n                     ^\n\u003cconsole\u003e:182: \u001b[31merror: \u001b[0midentifier expected but \u0027[\u0027 found.\n[source,cypher]\n^\n\u003cconsole\u003e:184: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027:\u0027 found.\nCREATE CONSTRAINT ON ()-[like:LIKED]-() ASSERT exists(like.day)\n                             ^\n\u003cconsole\u003e:185: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027:\u0027 found.\nCREATE CONSTRAINT ON ()-[starred:STARRED]-() ASSERT exists(starred.month)\n                                ^\n\u003cconsole\u003e:192: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nCALL apoc.schema.relationships()\n         ^\n\u003cconsole\u003e:195: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027this\u0027 found.\nyou will receive this result:\n                 ^\n\u003cconsole\u003e:199: \u001b[31merror: \u001b[0millegal start of simple expression\n\u003d\u003d\u003d Check if an index or a constraint exists for a Label and property\n          ^\n\u003cconsole\u003e:201: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\nGiven the previous index definitions, running this statement:\n                                    ^\n\u003cconsole\u003e:205: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nRETURN apoc.schema.node.indexExists(\"Publication\", [\"name\"])\n           ^\n\u003cconsole\u003e:209: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027\u003d\u0027 found.\nimage::apoc.schema.node.indexExists.png[scaledwidth\u003d\"100%\"]\n                                                   ^\n\u003cconsole\u003e:212: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027,\u0027 found.\nGiven the previous constraint definitions, running this statement:\n                                         ^\n\u003cconsole\u003e:216: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nRETURN apoc.schema.node.constraintExists(\"Bar\", [\"foobar\"])\n           ^\n\u003cconsole\u003e:220: \u001b[31merror: \u001b[0m\u0027]\u0027 expected but \u0027\u003d\u0027 found.\nimage::apoc.schema.node.constraintExists.png[scaledwidth\u003d\"100%\"]\n                                                        ^\n\u003cconsole\u003e:222: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027if\u0027 found.\nIf you want to check if a constraint exists for a relationship you can run this statement:\n                     ^\n\u003cconsole\u003e:226: \u001b[31merror: \u001b[0m\u0027;\u0027 expected but \u0027.\u0027 found.\nRETURN apoc.schema.relationship.constraintExists(\u0027LIKED\u0027, [\u0027day\u0027])\n           ^\n\u003cconsole\u003e:226: \u001b[31merror: \u001b[0munclosed character literal\nRETURN apoc.schema.relationship.constraintExists(\u0027LIKED\u0027, [\u0027day\u0027])\n                                                       ^\n\u003cconsole\u003e:226: \u001b[31merror: \u001b[0munclosed character literal\nRETURN apoc.schema.relationship.constraintExists(\u0027LIKED\u0027, [\u0027day\u0027])\n                                                               ^\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349315160_1325677210",
      "id": "paragraph_1635349315160_1325677210",
      "dateCreated": "2021-10-27 15:41:55.160",
      "dateStarted": "2021-10-27 15:42:01.840",
      "dateFinished": "2021-10-27 15:42:17.437",
      "status": "ERROR"
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349321839_926884581",
      "id": "paragraph_1635349321839_926884581",
      "dateCreated": "2021-10-27 15:42:01.839",
      "status": "READY"
    }
  ],
  "name": "Schema",
  "id": "2GNC5HTWK",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}