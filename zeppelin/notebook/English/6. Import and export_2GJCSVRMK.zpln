{
  "paragraphs": [
    {
      "text": "%md\n\n# Export\n\n```\nTo activate NEO4J_apoc_export_file_enabled: \"true\"\n```\n\n\n\n- Export to CSV (apoc.export.csv.\u003cTYPE\u003e)\n- Export to JSON (apoc.export.json.\u003cTYPE\u003e)\n- Export to Cypher Script (apoc.export.cypher.\u003cTYPE\u003e)\n- Export to GraphML (apoc.export.graphml.\u003cTYPE\u003e)\n- Export to Xls (apoc.export.xls.\u003cTYPE\u003e)\n\n\nWhere `\u003cType\u003e` can be all, data, graph, query.",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 13:41:53.580",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eExport\u003c/h1\u003e\n\u003cpre\u003e\u003ccode\u003eTo activate NEO4J_apoc_export_file_enabled: \u0026quot;true\u0026quot;\n\u003c/code\u003e\u003c/pre\u003e\n\u003cul\u003e\n\u003cli\u003eExport to CSV (apoc.export.csv.\u003cTYPE\u003e)\u003c/li\u003e\n\u003cli\u003eExport to JSON (apoc.export.json.\u003cTYPE\u003e)\u003c/li\u003e\n\u003cli\u003eExport to Cypher Script (apoc.export.cypher.\u003cTYPE\u003e)\u003c/li\u003e\n\u003cli\u003eExport to GraphML (apoc.export.graphml.\u003cTYPE\u003e)\u003c/li\u003e\n\u003cli\u003eExport to Xls (apoc.export.xls.\u003cTYPE\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWhere \u003cType\u003e\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348979662_2072141118",
      "id": "paragraph_1635348979662_2072141118",
      "dateCreated": "2021-10-27 15:36:19.662",
      "dateStarted": "2021-10-28 13:40:23.212",
      "dateFinished": "2021-10-28 13:40:23.256",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\ncall apoc.export.csv.all(\u0027miofile.csv\u0027, {})",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 13:48:30.268",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "file": "string",
                      "source": "string",
                      "format": "string",
                      "nodes": "string",
                      "relationships": "string",
                      "properties": "string",
                      "time": "string",
                      "rows": "string",
                      "batchSize": "string",
                      "batches": "string",
                      "done": "string",
                      "data": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "file\tsource\tformat\tnodes\trelationships\tproperties\ttime\trows\tbatchSize\tbatches\tdone\tdata\n\"miofile.csv\"\t\"database: nodes(0), rels(0)\"\t\"csv\"\t0\t0\t0\t12\t0\t20000\t1\tTRUE\tNULL\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635427510277_1468145857",
      "id": "paragraph_1635427510277_1468145857",
      "dateCreated": "2021-10-28 13:25:10.278",
      "dateStarted": "2021-10-28 13:48:30.296",
      "dateFinished": "2021-10-28 13:48:32.755",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nMATCH path \u003d (person:Person)-[:DIRECTED]-\u003e(movie) WITH path\ncall apoc.export.csv.query(\"MATCH (person:Person) RETURN person\", \u0027person.csv\u0027, {})",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 14:10:12.858",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635429979268_1227511209",
      "id": "paragraph_1635429979268_1227511209",
      "dateCreated": "2021-10-28 14:06:19.269",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\nCALL apoc.graph.fromDB(\u0027test\u0027,{}) yield graph \n                        CALL apoc.export.csv.graph(graph, $s3,{quotes: \u0027none\u0027})",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 14:08:46.578",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635430116277_440029225",
      "id": "paragraph_1635430116277_440029225",
      "dateCreated": "2021-10-28 14:08:36.277",
      "status": "READY"
    },
    {
      "text": "%neo4j\nMATCH (person:Person) \\n\" +\n                        \"WHERE person.name STARTS WITH \\\"F\\\"\\n\" +\n                        \"WITH collect(person) as people\\n\" +\n                        \"CALL apoc.export.graphml.data(people, [], $file, {})",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 14:09:37.600",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635430176279_54704858",
      "id": "paragraph_1635430176279_54704858",
      "dateCreated": "2021-10-28 14:09:36.279",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\nCALL apoc.export.csv.all(null, {stream:true})",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 13:49:28.508",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "file": "string",
                      "source": "string",
                      "format": "string",
                      "nodes": "string",
                      "relationships": "string",
                      "properties": "string",
                      "time": "string",
                      "rows": "string",
                      "batchSize": "string",
                      "batches": "string",
                      "done": "string",
                      "data": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "file\tsource\tformat\tnodes\trelationships\tproperties\ttime\trows\tbatchSize\tbatches\tdone\tdata\nNULL\t\"database: nodes(0), rels(0)\"\t\"csv\"\t0\t0\t0\t11\t0\t20000\t1\tTRUE\t\"\\\"_id\\\",\\\"_labels\\\",\\\"_start\\\",\\\"_end\\\",\\\"_type\\\"\n\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635428920212_1319826402",
      "id": "paragraph_1635428920212_1319826402",
      "dateCreated": "2021-10-28 13:48:40.212",
      "dateStarted": "2021-10-28 13:49:27.911",
      "dateFinished": "2021-10-28 13:49:28.075",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n// todo - qualcosa con batch e qualcos\u0027altrp... oppure non so,\n\n// todo - nel movie graph assicurarsi che ci sia qualche array\n// mettere con una query magari...\nCALL apoc.export.csv.all(null, {stream: true, batchSize: 2000, delim: \u0027|\u0027, arrayDelim: \u0027.\u0027}) YIELD data",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 14:14:11.124",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "data": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "data\n\"\\\"_id\\\"|\\\"_labels\\\"|\\\"_start\\\"|\\\"_end\\\"|\\\"_type\\\"\n\"\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635428971466_1949470120",
      "id": "paragraph_1635428971466_1949470120",
      "dateCreated": "2021-10-28 13:49:31.466",
      "dateStarted": "2021-10-28 14:05:26.433",
      "dateFinished": "2021-10-28 14:05:26.548",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n## Import procedures\n\n- apoc.import.csv\n- apoc.import.graphml\n- apoc.import.json\n- apoc.import.xml\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 14:27:07.547",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635430474392_1169397948",
      "id": "paragraph_1635430474392_1169397948",
      "dateCreated": "2021-10-28 14:14:34.392",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\nsulla falsariga (along the lines of) del neo4j-admin-import, ma non richiede riavvio e db vuoto `However, using the import command of neo4j-admin is generally faster since it is run against a stopped and empty database.`\n\napoc.import.csv(nodes :: LIST? OF MAP?, relationships :: LIST? OF MAP?, config :: MAP?)\n\nThe procedure support the following config parameters:\n\n.Config parameters\n[opts\u003dheader]\n|\u003d\u003d\u003d\n| name | type | default | description | https://neo4j.com/docs/operations-manual/current/tools/import/options/[import tool counterpart]\n| delimiter | String | ,  |delimiter character between columns  | `--delimiter\u003d,`\n| arrayDelimiter | String | ; | delimiter character in arrays | `--array-delimiter\u003d;`\n| ignoreDuplicateNodes | Boolean | false | for duplicate nodes, only load the first one and skip the rest (true) or fail the import (false)  | `--ignore-duplicate-nodes\u003dfalse`\n| quotationCharacter | String | \" | quotation character   | `--quote\u003d\u0027\"\u0027`\n| stringIds | Boolean | true | treat ids as strings  | `--id-type\u003dSTRING`\n| skipLines | Integer | 1 | lines to skip (incl. header)  | N/A\n| ignoreBlankString | Boolean | false | if true ignore properties with a blank string | N/A\n|\u003d\u003d\u003d",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 14:31:00.486",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635431087189_1210091021",
      "id": "paragraph_1635431087189_1210091021",
      "dateCreated": "2021-10-28 14:24:47.190",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\n/*  \n    person.csv\n    ---\n    id:ID,name:STRING\n    1,John\n    2,Jane\n*/\n\n// we ...\nCALL apoc.import.csv([{fileName: \u0027file:/persons.csv\u0027, labels: [\u0027Person\u0027]}], [], {});\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 14:32:54.094",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635431483321_1383593912",
      "id": "paragraph_1635431483321_1383593912",
      "dateCreated": "2021-10-28 14:31:23.321",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\n# Load procedures\n(retrieve the result from file, doesn\u0027t execute graph operation, more flexible)\n\nCALL apoc.load.csv(\u0027test.csv\u0027)\n\nCALL apoc.load.csv($url,{skip: 1, limit: 2})\n\n\nname,age,kids,pass\nMichael,41,8:11:18,pass\nMichael,41,8:11:18,pass\nMichael,41,8:11:18,pass\nCALL apoc.load.csv($url,{results:[\u0027map\u0027,\u0027list\u0027,\u0027stringMap\u0027,\u0027strings\u0027],mapping:{name:{type:\u0027string\u0027},age:{type:\u0027int\u0027},kids:{array:true,arraySep:\u0027:\u0027,type:\u0027int\u0027},pass:{ignore:true}}})\n\n\n\nname\tage\nRana\t11\nCALL apoc.load.csv($url,{sep:\u0027TAB\u0027,results:[\u0027map\u0027,\u0027list\u0027,\u0027stringMap\u0027,\u0027strings\u0027]})",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 14:55:40.353",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635430550983_1766130711",
      "id": "paragraph_1635430550983_1766130711",
      "dateCreated": "2021-10-28 14:15:50.984",
      "status": "READY"
    },
    {
      "text": "%md\n\nLoad directory\n\napoc.load.directory(\u0027pattern\u0027, \u0027urlDir\u0027, {config}) YIELD value - Loads list of all files in folder specified by urlDir or in import folder if urlDir string is empty or not specified\n\n\nCALL apoc.load.directory();\n\nCALL apoc.load.directory(\"*.csv\");\n\nCALL apoc.load.directory(\"*.csv\", \"subfolder1\");\n\nCALL apoc.load.directory(\"*\", \"subfolder2\", {recursive: false});\n\n\nCALL apoc.load.directory(\u0027*.csv\u0027, \u0027path/to/directory\u0027)\nYIELD value WITH value as url ORDER BY url DESC\nCALL apoc.load.csv(url, {results:[\u0027map\u0027]}) YIELD map RETURN map",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 15:00:48.569",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349254490_188990093",
      "id": "paragraph_1635349254490_188990093",
      "dateCreated": "2021-10-27 15:40:54.490",
      "status": "READY"
    },
    {
      "text": "%md\n\nLoad directory async\n\napoc.load.directory.async.add(name, cypher, pattern, urlDir, {}) YIELD name, status, pattern, cypher, urlDir, config, error - Add or replace a folder listener with a specific name, pattern and url directory that execute the specified cypher query when an event is triggered and return listener list\n\n\n\napoc.load.directory.async.add(name :: STRING?, cypher :: STRING?, pattern \u003d * :: STRING?, urlDir \u003d  :: STRING?, config \u003d {} :: MAP?) :: (name :: STRING?, status :: STRING?, pattern :: STRING?, cypher :: STRING?, urlDir :: STRING?, config :: MAP?, error :: STRING?)\n\nconfigs:\n\ninterval Integer 1000 Time interval in ms after re-watch for directory changes\n\nlistenEventType List\u003cEnum\u003e List.of(\"CREATE\", \"DELETE\", \"MODIFY\") Types of event that execute the cypher query, that is creation (CREATE), deletion (DELETE) or editing (MODIFY) of a file in specified folder\n\n\nThe first parameter is the name of our custom watch listener.\nIf we use an already existing listener name, that listener will be overwritten.\nThe second parameter is the cypher query that will be executed.\nThe query can have the following parameters:\n\n* $fileName: the name of the file which triggered the event\n* $filePath: the absolute path of the file which triggered the event if `apoc.import.file.use_neo4j_config\u003dfalse`, otherwise the relative path starting from `$IMPORT_DIR`\n* $fileDirectory: the absolute path directory of the file which triggered the event if `apoc.import.file.use_neo4j_config\u003dfalse`, otherwise the relative path starting from `$IMPORT_DIR`\n* $listenEventType: the triggered event (\"CREATE\", \"DELETE\" or \"MODIFY\"). The event \"CREATE\" happens when a file is inserted in the folder,\n\"DELETE\" when a file is removed from the folder and \"MODIFY\" when a file in the folder is changed.\nPlease note that if a file is renamed, will be triggered 2 event, that is first \"DELETE\" and then\"CREATE\"\n\n\nThe third parameter is the pattern of file to search for.\nBy default is \u0027*\u0027, that is, search all files.\nThe fourth is the search path of directory.\nBy default is an empty string, that is, search file in `import` directory.\n\n\n\u003d\u003d\u003d Examples of interoperability with other procedures\n\nWe can use another load procedure as query parameter, like `apoc.load.csv` or `apoc.load.json`.\n\nHere are two examples.\n\nWe can execute:\n\n[source,cypher]\n----\nCALL apoc.load.directory.async.add(\u0027csvImport\u0027,\n\"CALL apoc.load.csv($filePath) yield list WITH list CREATE (n:CsvToNode {content: list, fileName: $fileName, fileDirectory: $fileDirectory, listenEventType: $listenEventType})\",\n\"*.csv\", \"csvFolder\" ,{listenEventType: [\"CREATE\", \"MODIFY\"]})\n----\n\nwhere `$fileName` is the file created/modified,\n`$filePath` is the relative path of the file, that is `$IMPORT_DIR/csvFolder/[FILENAME.csv]`,\n`$fileDirectory` is the relative path of the directory, that is `$IMPORT_DIR/csvFolder`\nand `$listenEventType` is the triggered event, that is `CREATE` or `MODIFY`.\n\n\nIf we upload the following file in `$IMPORT_DIR/csvFolder` folder:\n\n.test.csv\n[source,csv]\n----\nname,age\nSelma,8\nRana,11\nSelina,18\n----\n\nand then, executing `MATCH (n:CsvToNode) RETURN properties(n) as props`:\n\n.Results\n[opts\u003d\"header\"]\n|\u003d\u003d\u003d\n| props\n| {\n  \"fileName\": \"test.csv\",\n  \"listenEventType\": \"CREATE\",\n  \"fileDirectory\": \"csvFolder\",\n  \"content\": [\n    \"Selma\",\n    \"8\"\n  ]\n}\n| {\n  \"fileName\": \"test.csv\",\n  \"listenEventType\": \"CREATE\",\n  \"fileDirectory\": \"csvFolder\",\n  \"content\": [\n    \"Rana\",\n    \"11\"\n  ]\n}\n| {\n  \"fileName\": \"test.csv\",\n  \"listenEventType\": \"CREATE\",\n  \"fileDirectory\": \"csvFolder\",\n  \"content\": [\n    \"Selina\",\n    \"18\"\n  ]\n}\n|\u003d\u003d\u003d\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 15:07:27.964",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eLoad directory async\u003c/p\u003e\n\u003cp\u003eapoc.load.directory.async.add(name, cypher, pattern, urlDir, {}) YIELD name, status, pattern, cypher, urlDir, config, error - Add or replace a folder listener with a specific name, pattern and url directory that execute the specified cypher query when an event is triggered and return listener list\u003c/p\u003e\n\u003cp\u003eapoc.load.directory.async.add(name :: STRING?, cypher :: STRING?, pattern \u003d * :: STRING?, urlDir \u003d  :: STRING?, config \u003d {} :: MAP?) :: (name :: STRING?, status :: STRING?, pattern :: STRING?, cypher :: STRING?, urlDir :: STRING?, config :: MAP?, error :: STRING?)\u003c/p\u003e\n\u003cp\u003econfigs:\u003c/p\u003e\n\u003cp\u003einterval Integer 1000 Time interval in ms after re-watch for directory changes\u003c/p\u003e\n\u003cp\u003elistenEventType List\u003cEnum\u003e List.of(\u0026ldquo;CREATE\u0026rdquo;, \u0026ldquo;DELETE\u0026rdquo;, \u0026ldquo;MODIFY\u0026rdquo;) Types of event that execute the cypher query, that is creation (CREATE), deletion (DELETE) or editing (MODIFY) of a file in specified folder\u003c/p\u003e\n\u003cp\u003eThe first parameter is the name of our custom watch listener.\u003cbr /\u003e\nIf we use an already existing listener name, that listener will be overwritten.\u003cbr /\u003e\nThe second parameter is the cypher query that will be executed.\u003cbr /\u003e\nThe query can have the following parameters:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e$fileName: the name of the file which triggered the event\u003c/li\u003e\n\u003cli\u003e$filePath: the absolute path of the file which triggered the event if \u003ccode\u003eapoc.import.file.use_neo4j_config\u003dfalse\u003c/code\u003e, otherwise the relative path starting from \u003ccode\u003e$IMPORT_DIR\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e$fileDirectory: the absolute path directory of the file which triggered the event if \u003ccode\u003eapoc.import.file.use_neo4j_config\u003dfalse\u003c/code\u003e, otherwise the relative path starting from \u003ccode\u003e$IMPORT_DIR\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e$listenEventType: the triggered event (\u0026ldquo;CREATE\u0026rdquo;, \u0026ldquo;DELETE\u0026rdquo; or \u0026ldquo;MODIFY\u0026rdquo;). The event \u0026ldquo;CREATE\u0026rdquo; happens when a file is inserted in the folder,\u003cbr /\u003e\n\u0026ldquo;DELETE\u0026rdquo; when a file is removed from the folder and \u0026ldquo;MODIFY\u0026rdquo; when a file in the folder is changed.\u003cbr /\u003e\nPlease note that if a file is renamed, will be triggered 2 event, that is first \u0026ldquo;DELETE\u0026rdquo; and then\u0026quot;CREATE\u0026quot;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe third parameter is the pattern of file to search for.\u003cbr /\u003e\nBy default is \u0026lsquo;*\u0026rsquo;, that is, search all files.\u003cbr /\u003e\nThe fourth is the search path of directory.\u003cbr /\u003e\nBy default is an empty string, that is, search file in \u003ccode\u003eimport\u003c/code\u003e directory.\u003c/p\u003e\n\u003cp\u003e\u003d\u003d\u003d Examples of interoperability with other procedures\u003c/p\u003e\n\u003cp\u003eWe can use another load procedure as query parameter, like \u003ccode\u003eapoc.load.csv\u003c/code\u003e or \u003ccode\u003eapoc.load.json\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere are two examples.\u003c/p\u003e\n\u003cp\u003eWe can execute:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.load.directory.async.add(\u0026lsquo;csvImport\u0026rsquo;,\u003cbr /\u003e\n\u0026ldquo;CALL apoc.load.csv($filePath) yield list WITH list CREATE (n:CsvToNode {content: list, fileName: $fileName, fileDirectory: $fileDirectory, listenEventType: $listenEventType})\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;*.csv\u0026rdquo;, \u0026ldquo;csvFolder\u0026rdquo; ,{listenEventType: [\u0026ldquo;CREATE\u0026rdquo;, \u0026ldquo;MODIFY\u0026rdquo;]})\u003c/h2\u003e\n\u003cp\u003ewhere \u003ccode\u003e$fileName\u003c/code\u003e is the file created/modified,\u003cbr /\u003e\n\u003ccode\u003e$filePath\u003c/code\u003e is the relative path of the file, that is \u003ccode\u003e$IMPORT_DIR/csvFolder/[FILENAME.csv]\u003c/code\u003e,\u003cbr /\u003e\n\u003ccode\u003e$fileDirectory\u003c/code\u003e is the relative path of the directory, that is \u003ccode\u003e$IMPORT_DIR/csvFolder\u003c/code\u003e\u003cbr /\u003e\nand \u003ccode\u003e$listenEventType\u003c/code\u003e is the triggered event, that is \u003ccode\u003eCREATE\u003c/code\u003e or \u003ccode\u003eMODIFY\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIf we upload the following file in \u003ccode\u003e$IMPORT_DIR/csvFolder\u003c/code\u003e folder:\u003c/p\u003e\n\u003ch2\u003e.test.csv\u003cbr /\u003e\n[source,csv]\u003c/h2\u003e\n\u003ch2\u003ename,age\u003cbr /\u003e\nSelma,8\u003cbr /\u003e\nRana,11\u003cbr /\u003e\nSelina,18\u003c/h2\u003e\n\u003cp\u003eand then, executing \u003ccode\u003eMATCH (n:CsvToNode) RETURN properties(n) as props\u003c/code\u003e:\u003c/p\u003e\n\u003cp\u003e.Results\u003cbr /\u003e\n[opts\u003d\u0026ldquo;header\u0026rdquo;]\u003cbr /\u003e\n|\u003d\u003d\u003d\u003cbr /\u003e\n| props\u003cbr /\u003e\n| {\u003cbr /\u003e\n\u0026ldquo;fileName\u0026rdquo;: \u0026ldquo;test.csv\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;listenEventType\u0026rdquo;: \u0026ldquo;CREATE\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;fileDirectory\u0026rdquo;: \u0026ldquo;csvFolder\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;content\u0026rdquo;: [\n\u003cbr /\u003e\n\u0026ldquo;Selma\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;8\u0026rdquo;\u003cbr /\u003e\n]\u003cbr /\u003e\n}\u003cbr /\u003e\n| {\u003cbr /\u003e\n\u0026ldquo;fileName\u0026rdquo;: \u0026ldquo;test.csv\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;listenEventType\u0026rdquo;: \u0026ldquo;CREATE\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;fileDirectory\u0026rdquo;: \u0026ldquo;csvFolder\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;content\u0026rdquo;: [\n\u003cbr /\u003e\n\u0026ldquo;Rana\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;11\u0026rdquo;\u003cbr /\u003e\n]\u003cbr /\u003e\n}\u003cbr /\u003e\n| {\u003cbr /\u003e\n\u0026ldquo;fileName\u0026rdquo;: \u0026ldquo;test.csv\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;listenEventType\u0026rdquo;: \u0026ldquo;CREATE\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;fileDirectory\u0026rdquo;: \u0026ldquo;csvFolder\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;content\u0026rdquo;: [\n\u003cbr /\u003e\n\u0026ldquo;Selina\u0026rdquo;,\u003cbr /\u003e\n\u0026ldquo;18\u0026rdquo;\u003cbr /\u003e\n]\u003cbr /\u003e\n}\u003cbr /\u003e\n|\u003d\u003d\u003d\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635432964037_45593404",
      "id": "paragraph_1635432964037_45593404",
      "dateCreated": "2021-10-28 14:56:04.037",
      "dateStarted": "2021-10-28 15:07:27.956",
      "dateFinished": "2021-10-28 15:07:28.206",
      "status": "FINISHED"
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 15:07:27.955",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635433647954_1159343284",
      "id": "paragraph_1635433647954_1159343284",
      "dateCreated": "2021-10-28 15:07:27.955",
      "status": "READY"
    }
  ],
  "name": "Import and export",
  "id": "2GJCSVRMK",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}