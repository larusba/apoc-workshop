{
  "paragraphs": [
    {
      "text": "%md\n\n# Refactor data\n\nThe APOC library has a set of procedures that can be used to adjust data structure and values across parts or the entirety of the graph. \nWe will look at some of these of these procedures.\n\nThe complete list is \u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e.\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 20:26:31.493",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eRefactor data\u003c/h1\u003e\n\u003cp\u003eOne major component of data and business is that it constantly changes. When external factors change, we will likely need to modify our data to fit the new scenario, business requirements, or customer needs.\u003c/p\u003e\n\u003cp\u003eWe can do this with data refactoring. The APOC library has a set of procedures that can be used to adjust data structure and values across parts or the entirety of the graph. In this section, we will take a look at using several of these procedures to alter our data and respond to potential needs.\u003c/p\u003e\n\u003cp\u003eThe complete list is \u003ca href\u003d\"https://neo4j.com/labs/apoc/4.1/overview/apoc.refactor/\" target\u003d\"_blank\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348036359_2131776212",
      "id": "paragraph_1635348036359_2131776212",
      "dateCreated": "2021-10-27 15:20:36.359",
      "dateStarted": "2021-11-09 11:41:55.636",
      "dateFinished": "2021-11-09 11:41:55.648",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n### Invert relationships\n\nWe can quickly invert a relationship with a `CALL apoc.refactor.invert(rel)`, where `rel` is the relationship to be inverted.\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 20:28:28.817",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d apoc.refactor.invert Example:\u003c/p\u003e\n\u003cp\u003eWith our scenario in the last slide, we want to invert the PART_OF relationship between Product and Category nodes. The query below shows us how to use the apoc.refactor.invert procedure to do that.\u003c/p\u003e\n\u003cp\u003eMATCH (p:Product)-[part:PART_OF]-\u0026gt;(c:Category)\u003cbr /\u003e\nCALL apoc.refactor.invert(part) YIELD output\u003cbr /\u003e\nRETURN output\u003c/p\u003e\n\u003cp\u003eAfter running this statement, we can run our data model query again or retrieve a sample of the data to see the change.\u003c/p\u003e\n\u003cp\u003eCALL db.schema.visualization\u003c/p\u003e\n\u003cp\u003eIt worked!\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348071412_1417491836",
      "id": "paragraph_1635348071412_1417491836",
      "dateCreated": "2021-10-27 15:21:11.413",
      "dateStarted": "2021-10-29 12:50:27.006",
      "dateFinished": "2021-10-29 12:50:27.014",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nMATCH (p:Person {name: \u0027Al Pacino\u0027})-[rel:ACTED_IN]-\u003e(c:Movie)\nCALL apoc.refactor.invert(rel) YIELD output\nRETURN p, output, c",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 20:28:59.052",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "name": "string",
                      "born": "string",
                      "roles": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635512346388_400316643",
      "id": "paragraph_1635512346388_400316643",
      "dateCreated": "2021-10-29 12:59:06.388",
      "dateStarted": "2021-11-09 20:28:59.075",
      "dateFinished": "2021-11-09 20:28:59.193",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nMATCH path\u003d(p:Person {name: \u0027Al Pacino\u0027})\u003c-[part:ACTED_IN]-(c:Movie) RETURN path;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 20:29:02.049",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "tagline": "string",
                      "title": "string",
                      "released": "string",
                      "name": "string",
                      "born": "string",
                      "roles": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635512384106_1528908340",
      "id": "paragraph_1635512384106_1528908340",
      "dateCreated": "2021-10-29 12:59:44.106",
      "dateStarted": "2021-11-09 20:29:02.072",
      "dateFinished": "2021-11-09 20:29:02.095",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n### Renaming\n\nWe can rename relationships with the `apoc.refactor.rename.type(oldType, newType, [rels])`,\nto rename all relationships with type `oldType` to `newType`. `rels` is optional, can be a list of relationships to apply the refactor to.\n\nFormat: apoc.refactor.rename.type(oldType, newType, `[rels]`)\n\n\nWith the same logic we have:\n- call apoc.refactor.rename.label(oldLabel, newLabel, [nodes])\n- call apoc.refactor.rename.nodeProperty(oldName, newName, [nodes])\n- call apoc.refactor.rename.typeProperty(oldName, newName, [rels])\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 21:13:04.385",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d Renaming relationships\u003c/p\u003e\n\u003cp\u003eNow we might want to rename that relationship, since the idea that a Category is PART_OF a Product conveys the incorrect meaning for our use case. We can do this with the apoc.refactor.rename.type procedure.\u003c/p\u003e\n\u003cp\u003eFormat: apoc.refactor.rename.type(oldType, newType, [rels])\u003c/p\u003e\n\u003cp\u003eThe procedure has 3 parameters -\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe string type (name) of the relationship we want to change\n\nthe new string type (name) we want the relationship to have\n\n(optional) provided list of specific relationships we want to change\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003d\u003d apoc.refactor.rename.type Example:\u003c/p\u003e\n\u003cp\u003eLet’s change the name of our PART_OF relationship between the Category and Product nodes so that it fits our business model more accurately.\u003c/p\u003e\n\u003cp\u003eCALL apoc.refactor.rename.type(\u0026lsquo;PART_OF\u0026rsquo;,\u0026lsquo;INCLUDES\u0026rsquo;) yield total\u003cbr /\u003e\nRETURN total\u003c/p\u003e\n\u003cp\u003eIn the above statement, we call the procedure and pass in the relationship we want to change (PART_OF) and tell it what we want the new relationship to be called (INCLUDES). Then, we pull the count of how many were updated in the procedure and return that count.\u003c/p\u003e\n\u003cp\u003eIf we run our visualization statement again, we now will see that a Category INCLUDES a Product, just as we planned.\u003c/p\u003e\n\u003cp\u003eCALL db.schema.visualization\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348082297_1111714116",
      "id": "paragraph_1635348082297_1111714116",
      "dateCreated": "2021-10-27 15:21:22.297",
      "dateStarted": "2021-10-29 12:50:27.125",
      "dateFinished": "2021-10-29 12:50:27.136",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nMATCH path\u003d(p:Person {name: \u0027Al Pacino\u0027})-[rel:ACTED_IN]-(c:Movie) \nCALL apoc.refactor.rename.type(\"ACTED_IN\", \"NEW_REL\", [rel]) YIELD total\nWITH p,c\nMATCH path\u003d(p)--(c)\nRETURN path;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 20:41:15.564",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "tagline": "string",
                      "title": "string",
                      "released": "string",
                      "name": "string",
                      "born": "string",
                      "roles": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":41,\"data\":{\"tagline\":\"Evil has its winning ways\",\"title\":\"The Devil\\u0027s Advocate\",\"released\":1997},\"label\":\"Movie\"},{\"id\":43,\"data\":{\"name\":\"Al Pacino\",\"born\":1940},\"label\":\"Person\"}],\"edges\":[{\"source\":43,\"target\":41,\"id\":274,\"data\":{\"roles\":[\"John Milton\"]},\"label\":\"ACTED_IN\"}],\"labels\":{\"TTL\":\"#2EC610\",\"NodeWithUnique\":\"#B8C858\",\"Person\":\"#F229BB\",\"Company\":\"#F4C50F\",\"Car\":\"#00123F\",\"Animal\":\"#D0B639\",\"Cat\":\"#6AC79B\",\"City\":\"#56B1BC\",\"MergeOne\":\"#15FFE2\",\"Movie\":\"#7A535E\"},\"types\":[\"ACTED_IN\",\"REVIEWED\",\"PRODUCED\",\"WROTE\",\"HAS_HQ\",\"FOLLOWS\",\"DIRECTED\",\"WORKS_FOR\",\"HAS\",\"DRIVE\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636490164902_947450098",
      "id": "paragraph_1636490164902_947450098",
      "dateCreated": "2021-11-09 20:36:04.905",
      "dateStarted": "2021-11-09 20:41:06.352",
      "dateFinished": "2021-11-09 20:41:06.599",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\n### Grouping nodes into categories\n\nTo turn a unique property key of a target node into a new node and connect target and new node.\n\nOutside of our product and category data, we also might want to add categorization for other groupings in our graph. For instance, we might want to categorize customers by country to know how our customers are distributed or for ensuring we have enough support staff to manage larger customer bases in different areas.\n\nWe can use the apoc.refactor.categorize procedure to extract country information from our Customer nodes and create new Country nodes out of it.\n\n\u003cpre\u003e\nCALL apoc.refactor.categorize(sourceKey, type, outgoing, label, targetKey, copiedKeys, batchSize)\n\u003c/pre\u003e\n```\nWhere the parameters are:\n\n- `sourceKey`: the property on the existing node we want to use to create the new node\n- `type`: the type for the new relationship for connecting the existing node to the new node\n- `outgoing`: whether the relationship is outgoing or not\n- `label`: the label for the new node\n- `targetKey`: the key property name we want on the new node\n- `copiedKeys`: any additional properties we’d like copied from the old node to the new\n- `batchSize`\n    \n\n    \n\n    if we have a lot of nodes to update, we can specify to do it in batches\n\n\u003d\u003d apoc.refactor.categorize Example:\n\nBefore we can execute this procedure, we need to put a constraint on the new node and property key. That can be done with the statement below.\n\nWe will want to wait a few minutes for the constraint to come online, and we can check that by running the db.indexes procedure. Then, we can add our new Country node categories with the following procedure:\n\nCALL apoc.refactor.categorize(\u0027country\u0027, \u0027LOCATED_IN\u0027, true, \u0027Country\u0027, \u0027countryName\u0027, [], 100)\n\nHere, we have specified that we want to take the country property, which is on the Customer nodes and create a LOCATED_IN relationship that is outgoing from the customer to a new Country node with the property called countryName on the new node.\n\nNote: This procedure will remove the country property from the Customer nodes and move them to Country, rather than making a copy of the property to the new nodes.\n\n\u003d\u003d Verify categories\n\nNow, if we run either our visualization or a sample data query, we can verify. Here, we will run a sample data query to see move of the property from Customer to Country.\n\nMATCH (c:Customer)-[rel]-\u003e(other)\nRETURN c, rel, other\n\nIf you click on a Customer node in the result set, you can see that the country property from customers no longer exists on those nodes and has been moved over to new Country nodes as countryName property. Everything looks as we expect it!\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 21:20:15.470",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d Grouping nodes into categories\u003c/p\u003e\n\u003cp\u003eOutside of our product and category data, we also might want to add categorization for other groupings in our graph. For instance, we might want to categorize customers by country to know how our customers are distributed or for ensuring we have enough support staff to manage larger customer bases in different areas.\u003c/p\u003e\n\u003cp\u003eWe can use the apoc.refactor.categorize procedure to extract country information from our Customer nodes and create new Country nodes out of it.\u003c/p\u003e\n\u003cp\u003eFormat: apoc.refactor.categorize(sourceKey, type, outgoing, label, targetKey, copiedKeys, batchSize)\u003c/p\u003e\n\u003cp\u003eThe procedure has up to 7 parameters -\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe property on the existing node we want to use to create the new node\n\nthe type for the new relationship for connecting the existing node to the new node\n\nwhether the relationship is outgoing or not\n\nthe label for the new node\n\nthe key property name we want on the new node\n\nany additional properties we’d like copied from the old node to the new\n\nif we have a lot of nodes to update, we can specify to do it in batches\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003d\u003d apoc.refactor.categorize Example:\u003c/p\u003e\n\u003cp\u003eBefore we can execute this procedure, we need to put a constraint on the new node and property key. That can be done with the statement below.\u003c/p\u003e\n\u003cp\u003eCREATE CONSTRAINT ON (c:Country) ASSERT c.countryName IS UNIQUE;\u003c/p\u003e\n\u003cp\u003eWe will want to wait a few minutes for the constraint to come online, and we can check that by running the db.indexes procedure. Then, we can add our new Country node categories with the following procedure:\u003c/p\u003e\n\u003cp\u003eCALL apoc.refactor.categorize(\u0026lsquo;country\u0026rsquo;, \u0026lsquo;LOCATED_IN\u0026rsquo;, true, \u0026lsquo;Country\u0026rsquo;, \u0026lsquo;countryName\u0026rsquo;, [], 100)\u003c/p\u003e\n\u003cp\u003eHere, we have specified that we want to take the country property, which is on the Customer nodes and create a LOCATED_IN relationship that is outgoing from the customer to a new Country node with the property called countryName on the new node.\u003c/p\u003e\n\u003cp\u003eNote: This procedure will remove the country property from the Customer nodes and move them to Country, rather than making a copy of the property to the new nodes.\u003c/p\u003e\n\u003cp\u003e\u003d\u003d Verify categories\u003c/p\u003e\n\u003cp\u003eNow, if we run either our visualization or a sample data query, we can verify. Here, we will run a sample data query to see move of the property from Customer to Country.\u003c/p\u003e\n\u003cp\u003eMATCH (c:Customer)-[rel]-\u0026gt;(other)\u003cbr /\u003e\nRETURN c, rel, other\u003c/p\u003e\n\u003cp\u003eIf you click on a Customer node in the result set, you can see that the country property from customers no longer exists on those nodes and has been moved over to new Country nodes as countryName property. Everything looks as we expect it!\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348112816_1621294288",
      "id": "paragraph_1635348112816_1621294288",
      "dateCreated": "2021-10-27 15:21:52.816",
      "dateStarted": "2021-10-29 12:50:27.240",
      "dateFinished": "2021-10-29 12:50:27.251",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nCREATE CONSTRAINT ON (n:`TagLine`) ASSERT n.`name` IS UNIQUE;\n\nCALL apoc.refactor.categorize(\u0027tagline\u0027, \u0027TAGLINE\u0027, true, \"TagLine\", \"name\", [\"released\"], 100);\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 21:23:38.965",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636492769374_1747537371",
      "id": "paragraph_1636492769374_1747537371",
      "dateCreated": "2021-11-09 21:19:29.374",
      "dateStarted": "2021-11-09 21:23:38.987",
      "dateFinished": "2021-11-09 21:23:39.559",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nMATCH p\u003d(n)-[:TAGLINE]-()\nRETURN p;\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 21:23:52.260",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "title": "string",
                      "name": "string",
                      "released": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":1,\"data\":{\"title\":\"The Matrix\"},\"label\":\"Movie\"},{\"id\":130,\"data\":{\"title\":\"Johnny Mnemonic\"},\"label\":\"Movie\"},{\"id\":135,\"data\":{\"title\":\"Cloud Atlas\"},\"label\":\"Movie\"},{\"id\":141,\"data\":{\"title\":\"The Da Vinci Code\"},\"label\":\"Movie\"},{\"id\":146,\"data\":{\"title\":\"V for Vendetta\"},\"label\":\"Movie\"},{\"id\":151,\"data\":{\"title\":\"Speed Racer\"},\"label\":\"Movie\"},{\"id\":158,\"data\":{\"title\":\"Ninja Assassin\"},\"label\":\"Movie\"},{\"id\":160,\"data\":{\"title\":\"The Green Mile\"},\"label\":\"Movie\"},{\"id\":39,\"data\":{\"title\":\"The Matrix Reloaded\"},\"label\":\"Movie\"},{\"id\":167,\"data\":{\"title\":\"Frost/Nixon\"},\"label\":\"Movie\"},{\"id\":40,\"data\":{\"title\":\"The Matrix Revolutions\"},\"label\":\"Movie\"},{\"id\":41,\"data\":{\"title\":\"The Devil\\u0027s Advocate\"},\"label\":\"Movie\"},{\"id\":171,\"data\":{\"title\":\"Hoffa\"},\"label\":\"Movie\"},{\"id\":45,\"data\":{\"title\":\"A Few Good Men\"},\"label\":\"Movie\"},{\"id\":174,\"data\":{\"title\":\"Apollo 13\"},\"label\":\"Movie\"},{\"id\":177,\"data\":{\"title\":\"Twister\"},\"label\":\"Movie\"},{\"id\":180,\"data\":{\"title\":\"Cast Away\"},\"label\":\"Movie\"},{\"id\":182,\"data\":{\"title\":\"One Flew Over the Cuckoo\\u0027s Nest\"},\"label\":\"Movie\"},{\"id\":59,\"data\":{\"title\":\"Top Gun\"},\"label\":\"Movie\"},{\"id\":187,\"data\":{\"title\":\"Bicentennial Man\"},\"label\":\"Movie\"},{\"id\":189,\"data\":{\"title\":\"Charlie Wilson\\u0027s War\"},\"label\":\"Movie\"},{\"id\":191,\"data\":{\"title\":\"The Polar Express\"},\"label\":\"Movie\"},{\"id\":192,\"data\":{\"title\":\"A League of Their Own\"},\"label\":\"Movie\"},{\"id\":67,\"data\":{\"title\":\"Jerry Maguire\"},\"label\":\"Movie\"},{\"id\":201,\"data\":{\"name\":\"What if someone you never met, someone you never saw, someone you never knew was the only someone for you?\",\"released\":1993},\"label\":\"TagLine\"},{\"id\":202,\"data\":{\"name\":\"Welcome to the Real World\",\"released\":1999},\"label\":\"TagLine\"},{\"id\":203,\"data\":{\"name\":\"A story of love, lava and burning desire.\",\"released\":1990},\"label\":\"TagLine\"},{\"id\":204,\"data\":{\"name\":\"Free your mind\",\"released\":2003},\"label\":\"TagLine\"},{\"id\":76,\"data\":{\"title\":\"Stand By Me\"},\"label\":\"Movie\"},{\"id\":205,\"data\":{\"name\":\"Can two friends sleep together and still love each other in the morning?\",\"released\":1998},\"label\":\"TagLine\"},{\"id\":206,\"data\":{\"name\":\"Everything that has a beginning has an end\",\"released\":2003},\"label\":\"TagLine\"},{\"id\":207,\"data\":{\"name\":\"In every life there comes a time when that thing you dream becomes that thing you do\",\"released\":1996},\"label\":\"TagLine\"},{\"id\":208,\"data\":{\"name\":\"Evil has its winning ways\",\"released\":1997},\"label\":\"TagLine\"},{\"id\":209,\"data\":{\"name\":\"Pain heals, Chicks dig scars... Glory lasts forever\",\"released\":2000},\"label\":\"TagLine\"},{\"id\":210,\"data\":{\"name\":\"In the heart of the nation\\u0027s capital, in a courthouse of the U.S. government, one man will stop at nothing to keep his honor, and one will stop at nothing to find the truth.\",\"released\":1992},\"label\":\"TagLine\"},{\"id\":82,\"data\":{\"title\":\"As Good as It Gets\"},\"label\":\"Movie\"},{\"id\":211,\"data\":{\"name\":\"Based on the extraordinary true story of one man\\u0027s fight for freedom\",\"released\":2006},\"label\":\"TagLine\"},{\"id\":212,\"data\":{\"name\":\"Come as you are\",\"released\":1996},\"label\":\"TagLine\"},{\"id\":213,\"data\":{\"name\":\"I feel the need, the need for speed.\",\"released\":1986},\"label\":\"TagLine\"},{\"id\":214,\"data\":{\"name\":\"It\\u0027s a hell of a thing, killing a man\",\"released\":1992},\"label\":\"TagLine\"},{\"id\":86,\"data\":{\"title\":\"What Dreams May Come\"},\"label\":\"Movie\"},{\"id\":215,\"data\":{\"name\":\"The rest of his life begins now.\",\"released\":2000},\"label\":\"TagLine\"},{\"id\":216,\"data\":{\"name\":\"For some, it\\u0027s the last real taste of innocence, and the first real taste of life. But for everyone, it\\u0027s the time that memories are made of.\",\"released\":1986},\"label\":\"TagLine\"},{\"id\":217,\"data\":{\"name\":\"The hottest data on earth. In the coolest head in town\",\"released\":1995},\"label\":\"TagLine\"},{\"id\":218,\"data\":{\"name\":\"A comedy from the heart that goes for the throat.\",\"released\":1997},\"label\":\"TagLine\"},{\"id\":219,\"data\":{\"name\":\"Everything is connected\",\"released\":2012},\"label\":\"TagLine\"},{\"id\":220,\"data\":{\"name\":\"After life there is more. The end is just the beginning.\",\"released\":1998},\"label\":\"TagLine\"},{\"id\":92,\"data\":{\"title\":\"Snow Falling on Cedars\"},\"label\":\"Movie\"},{\"id\":221,\"data\":{\"name\":\"Break The Codes\",\"released\":2006},\"label\":\"TagLine\"},{\"id\":222,\"data\":{\"name\":\"Freedom! Forever!\",\"released\":2006},\"label\":\"TagLine\"},{\"id\":223,\"data\":{\"name\":\"First loves last. Forever.\",\"released\":1999},\"label\":\"TagLine\"},{\"id\":224,\"data\":{\"name\":\"Speed has no limits\",\"released\":2008},\"label\":\"TagLine\"},{\"id\":97,\"data\":{\"title\":\"You\\u0027ve Got Mail\"},\"label\":\"Movie\"},{\"id\":225,\"data\":{\"name\":\"At odds in life... in love on-line.\",\"released\":1998},\"label\":\"TagLine\"},{\"id\":226,\"data\":{\"name\":\"Prepare to enter a secret world of assassins\",\"released\":2009},\"label\":\"TagLine\"},{\"id\":227,\"data\":{\"name\":\"Walk a mile you\\u0027ll never forget.\",\"released\":1999},\"label\":\"TagLine\"},{\"id\":228,\"data\":{\"name\":\"400 million people were waiting for the truth.\",\"released\":2008},\"label\":\"TagLine\"},{\"id\":229,\"data\":{\"name\":\"He didn\\u0027t want law. He wanted justice.\",\"released\":1992},\"label\":\"TagLine\"},{\"id\":230,\"data\":{\"name\":\"Houston, we have a problem.\",\"released\":1995},\"label\":\"TagLine\"},{\"id\":103,\"data\":{\"title\":\"Sleepless in Seattle\"},\"label\":\"Movie\"},{\"id\":231,\"data\":{\"name\":\"Don\\u0027t Breathe. Don\\u0027t Look Back.\",\"released\":1996},\"label\":\"TagLine\"},{\"id\":232,\"data\":{\"name\":\"At the edge of the world, his journey begins.\",\"released\":2000},\"label\":\"TagLine\"},{\"id\":233,\"data\":{\"name\":\"If he\\u0027s crazy, what does that make you?\",\"released\":1975},\"label\":\"TagLine\"},{\"id\":234,\"data\":{\"name\":\"One robot\\u0027s 200 year journey to become an ordinary man.\",\"released\":1999},\"label\":\"TagLine\"},{\"id\":235,\"data\":{\"name\":\"A stiff drink. A little mascara. A lot of nerve. Who said they couldn\\u0027t bring down the Soviet empire.\",\"released\":2007},\"label\":\"TagLine\"},{\"id\":108,\"data\":{\"title\":\"Joe Versus the Volcano\"},\"label\":\"Movie\"},{\"id\":236,\"data\":{\"name\":\"This Holiday Season... Believe\",\"released\":2004},\"label\":\"TagLine\"},{\"id\":237,\"data\":{\"name\":\"Once in a lifetime you get a chance to do something different.\",\"released\":1992},\"label\":\"TagLine\"},{\"id\":111,\"data\":{\"title\":\"When Harry Met Sally\"},\"label\":\"Movie\"},{\"id\":115,\"data\":{\"title\":\"That Thing You Do\"},\"label\":\"Movie\"},{\"id\":117,\"data\":{\"title\":\"The Replacements\"},\"label\":\"Movie\"},{\"id\":122,\"data\":{\"title\":\"RescueDawn\"},\"label\":\"Movie\"},{\"id\":125,\"data\":{\"title\":\"The Birdcage\"},\"label\":\"Movie\"},{\"id\":127,\"data\":{\"title\":\"Unforgiven\"},\"label\":\"Movie\"}],\"edges\":[{\"source\":1,\"target\":202,\"id\":275,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":108,\"target\":203,\"id\":276,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":39,\"target\":204,\"id\":277,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":111,\"target\":205,\"id\":278,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":40,\"target\":206,\"id\":279,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":115,\"target\":207,\"id\":280,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":117,\"target\":209,\"id\":281,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":41,\"target\":208,\"id\":282,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":122,\"target\":211,\"id\":283,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":45,\"target\":210,\"id\":284,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":125,\"target\":212,\"id\":285,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":59,\"target\":213,\"id\":286,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":67,\"target\":215,\"id\":287,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":127,\"target\":214,\"id\":288,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":76,\"target\":216,\"id\":289,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":130,\"target\":217,\"id\":290,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":82,\"target\":218,\"id\":291,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":135,\"target\":219,\"id\":292,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":141,\"target\":221,\"id\":293,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":86,\"target\":220,\"id\":294,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":146,\"target\":222,\"id\":295,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":92,\"target\":223,\"id\":296,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":151,\"target\":224,\"id\":297,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":97,\"target\":225,\"id\":298,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":158,\"target\":226,\"id\":299,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":160,\"target\":227,\"id\":300,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":103,\"target\":201,\"id\":45,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":167,\"target\":228,\"id\":301,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":171,\"target\":229,\"id\":302,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":174,\"target\":230,\"id\":303,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":177,\"target\":231,\"id\":304,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":180,\"target\":232,\"id\":305,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":182,\"target\":233,\"id\":306,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":187,\"target\":234,\"id\":307,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":189,\"target\":235,\"id\":308,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":191,\"target\":236,\"id\":309,\"data\":{},\"label\":\"TAGLINE\"},{\"source\":192,\"target\":237,\"id\":310,\"data\":{},\"label\":\"TAGLINE\"}],\"labels\":{\"TTL\":\"#2EC610\",\"NodeWithUnique\":\"#B8C858\",\"Person\":\"#F229BB\",\"Company\":\"#F4C50F\",\"Car\":\"#00123F\",\"Animal\":\"#D0B639\",\"Cat\":\"#6AC79B\",\"City\":\"#56B1BC\",\"MergeOne\":\"#15FFE2\",\"Movie\":\"#7A535E\",\"Genre\":\"#F1DFDE\",\"TagLine\":\"#E234BD\"},\"types\":[\"ACTED_IN\",\"REVIEWED\",\"PRODUCED\",\"WROTE\",\"HAS_HQ\",\"FOLLOWS\",\"DIRECTED\",\"WORKS_FOR\",\"HAS\",\"TAGLINE\",\"DRIVE\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636492841631_775451986",
      "id": "paragraph_1636492841631_775451986",
      "dateCreated": "2021-11-09 21:20:41.631",
      "dateStarted": "2021-11-09 21:23:50.086",
      "dateFinished": "2021-11-09 21:23:50.236",
      "status": "FINISHED"
    },
    {
      "text": "%md\n### Move relationships to other nodes\n\nI can move a `rel` to another `endNode` using the `apoc.refactor.to(rel, endNode)` procedure.\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 21:31:43.411",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d Refactor relationships to other nodes\u003c/p\u003e\n\u003cp\u003eTaking refactoring to the next level, we may want to change existing structure of our graph to represent the idea that customers purchase products, rather than orders. So, instead of having Customer PURCHASED Order, as we do now, it could be that Customer PURCHASED Product. This could help us see more easily which products are most popular or prioritize stocking of products that larger customers rely upon.\u003c/p\u003e\n\u003cp\u003eThe apoc.refactor.to procedure can help us do that.\u003c/p\u003e\n\u003cp\u003eFormat: apoc.refactor.to(relationship, endNode)\u003c/p\u003e\n\u003cp\u003eThe procedure has 2 parameters -\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ethe relationship that we want to change\n\nthe node where we want the relationship to go\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e\u003d\u003d apoc.refactor.to Example:\u003c/p\u003e\n\u003cp\u003eWe can alter where the PURCHASED relationship goes with the APOC code below.\u003c/p\u003e\n\u003cp\u003eMATCH (c:Customer)-[rel:PURCHASED]-(o:Order)-[rel2:ORDERS]-(p:Product)\u003cbr /\u003e\nCALL apoc.refactor.to(rel, p) YIELD output\u003cbr /\u003e\nRETURN output\u003c/p\u003e\n\u003cp\u003eFor verification, we can retrieve some customers and related entities to see that now Customer nodes are connected to Product nodes directly with a PURCHASED relationship.\u003c/p\u003e\n\u003cp\u003eMATCH (c:Customer)-[rel]-(other)\u003cbr /\u003e\nRETURN c, rel, other LIMIT 50\u003c/p\u003e\n\u003cp\u003eWith this new structure, we can run queries to see how many different products a customer has purchased, how many products within specific categories, and most similar customers (based on products in common) without going through the Order nodes to find this information.\u003c/p\u003e\n\u003cp\u003eNote: We have also diluted our order tracking where we no longer can easily tell which orders a specific customer made. Refactoring may make some queries easier, but others more complex. Impacts of changes should be evaluated.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348117637_648932751",
      "id": "paragraph_1635348117637_648932751",
      "dateCreated": "2021-10-27 15:21:57.637",
      "dateStarted": "2021-10-29 12:50:27.354",
      "dateFinished": "2021-10-29 12:50:27.361",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\nCREATE (person1:Person {name: \"Ryu\"})-[:FRIENDS]-\u003e(person2:Person {name: \"Ken\"})\nCREATE (person3:Person {name: \"Vega\"})",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 21:37:52.313",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": []
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636493197463_663515208",
      "id": "paragraph_1636493197463_663515208",
      "dateCreated": "2021-11-09 21:26:37.463",
      "dateStarted": "2021-11-09 21:37:52.339",
      "dateFinished": "2021-11-09 21:37:52.369",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nMATCH (:Person {name: \"Ryu\"})-[rel:FRIENDS]-\u003e(:Person {name: \"Ken\"})\nMATCH (vega:Person {name: \"Vega\"})\nCALL apoc.refactor.to(rel, vega)\nYIELD input, output\nMATCH path\u003d(vega)--()\nRETURN path",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 21:37:54.509",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "name": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":238,\"data\":{\"name\":\"Ryu\"},\"label\":\"Person\"},{\"id\":239,\"data\":{\"name\":\"Vega\"},\"label\":\"Person\"}],\"edges\":[{\"source\":238,\"target\":239,\"id\":312,\"data\":{},\"label\":\"FRIENDS\"}],\"labels\":{\"TTL\":\"#2EC610\",\"NodeWithUnique\":\"#B8C858\",\"Person\":\"#F229BB\",\"Company\":\"#F4C50F\",\"Car\":\"#00123F\",\"Animal\":\"#D0B639\",\"Cat\":\"#6AC79B\",\"City\":\"#56B1BC\",\"MergeOne\":\"#15FFE2\",\"Movie\":\"#7A535E\",\"Genre\":\"#F1DFDE\",\"TagLine\":\"#E234BD\"},\"types\":[\"ACTED_IN\",\"REVIEWED\",\"FRIENDS\",\"PRODUCED\",\"WROTE\",\"HAS_HQ\",\"FOLLOWS\",\"DIRECTED\",\"WORKS_FOR\",\"HAS\",\"TAGLINE\",\"DRIVE\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636493214206_391080068",
      "id": "paragraph_1636493214206_391080068",
      "dateCreated": "2021-11-09 21:26:54.206",
      "dateStarted": "2021-11-09 21:37:54.530",
      "dateFinished": "2021-11-09 21:37:54.683",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\u003d\u003d Condensing multiple relationships\n\nWith our last update, you may have noticed that some customers have purchased certain products multiple times, causing multiple PURCHASED relationships to appear between a Customer and Product node when we moved the relationship from individual orders to more general products. We can condense these multiple relationships into a single PURCHASED relationship, as well as add a count property for the number of times a certain product has been ordered by that customer.\n\nThe apoc.refactor.mergeRelationships procedure can help.\n\nFormat: apoc.refactor.mergeRelationships([rel1, rel2])\n\nThe procedure has 2 parameters -\n\n    a list of the relationships we want to merge\n\n    any configuration for whether we want properties to be overwritten, discarded, or combined\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:50:27.453",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d Condensing multiple relationships\u003c/p\u003e\n\u003cp\u003eWith our last update, you may have noticed that some customers have purchased certain products multiple times, causing multiple PURCHASED relationships to appear between a Customer and Product node when we moved the relationship from individual orders to more general products. We can condense these multiple relationships into a single PURCHASED relationship, as well as add a count property for the number of times a certain product has been ordered by that customer.\u003c/p\u003e\n\u003cp\u003eThe apoc.refactor.mergeRelationships procedure can help.\u003c/p\u003e\n\u003cp\u003eFormat: apoc.refactor.mergeRelationships([rel1, rel2])\u003c/p\u003e\n\u003cp\u003eThe procedure has 2 parameters -\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003ea list of the relationships we want to merge\n\nany configuration for whether we want properties to be overwritten, discarded, or combined\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348136638_535583225",
      "id": "paragraph_1635348136638_535583225",
      "dateCreated": "2021-10-27 15:22:16.638",
      "dateStarted": "2021-10-29 12:50:27.467",
      "dateFinished": "2021-10-29 12:50:27.474",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\u003d\u003d apoc.refactor.mergeRelationships Example:\n\nNow, we can go ahead and see this in action to condense our relationships between customers and products to a single relationship and tracking the number of times a customer has purchased a particular product.\n\nMATCH (c:Customer)-[r:PURCHASED]-\u003e(p:Product)\nWITH c, p, collect(r) as rels, count(r) as relNum\nCALL apoc.refactor.mergeRelationships(rels, {properties: \u0027discard\u0027}) yield rel\nSET rel.purchaseCount \u003d relNum\nRETURN rel\n\nIn our query, we find Customer nodes with a PURCHASED relationship to Product nodes. We then aggregate those patterns into unique rows (based on aggregations for customer and product nodes), as well as collect the relationships into a list (so we can merge them) and count the relationships to store. The next line calls the procedure and passes in the list of relationships, adding configuration to discard properties on duplicate relationships and outputs the relationships from the merge. Next, we set the purchaseCount property on each relationship with the count of purchases between individual customers and products and return the results.\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 11:58:35.889",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d apoc.refactor.mergeRelationships Example:\u003c/p\u003e\n\u003cp\u003eNow, we can go ahead and see this in action to condense our relationships between customers and products to a single relationship and tracking the number of times a customer has purchased a particular product.\u003c/p\u003e\n\u003cp\u003eMATCH (c:Customer)-[r:PURCHASED]-\u0026gt;(p:Product)\u003cbr /\u003e\nWITH c, p, collect(r) as rels, count(r) as relNum\u003cbr /\u003e\nCALL apoc.refactor.mergeRelationships(rels, {properties: \u0026lsquo;discard\u0026rsquo;}) yield rel\u003cbr /\u003e\nSET rel.purchaseCount \u003d relNum\u003cbr /\u003e\nRETURN rel\u003c/p\u003e\n\u003cp\u003eIn our query, we find Customer nodes with a PURCHASED relationship to Product nodes. We then aggregate those patterns into unique rows (based on aggregations for customer and product nodes), as well as collect the relationships into a list (so we can merge them) and count the relationships to store. The next line calls the procedure and passes in the list of relationships, adding configuration to discard properties on duplicate relationships and outputs the relationships from the merge. Next, we set the purchaseCount property on each relationship with the count of purchases between individual customers and products and return the results.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348147110_48008613",
      "id": "paragraph_1635348147110_48008613",
      "dateCreated": "2021-10-27 15:22:27.110",
      "dateStarted": "2021-10-29 12:50:27.582",
      "dateFinished": "2021-10-29 12:50:27.589",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\u003d\u003d Verify merged relationships\n\nIf we run a quick sample query like the one below, we can verify that we now have a single relationship between each Customer and Product and that the purchaseCount stores the number of times someone has purchased something.\n\nMATCH (n1:Customer)-[r]-\u003e(n2) RETURN r, n1, n2 LIMIT 25\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-29 12:50:27.681",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d Verify merged relationships\u003c/p\u003e\n\u003cp\u003eIf we run a quick sample query like the one below, we can verify that we now have a single relationship between each Customer and Product and that the purchaseCount stores the number of times someone has purchased something.\u003c/p\u003e\n\u003cp\u003eMATCH (n1:Customer)-[r]-\u0026gt;(n2) RETURN r, n1, n2 LIMIT 25\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635348151510_2035604528",
      "id": "paragraph_1635348151510_2035604528",
      "dateCreated": "2021-10-27 15:22:31.510",
      "dateStarted": "2021-10-29 12:50:27.694",
      "dateFinished": "2021-10-29 12:50:27.700",
      "status": "FINISHED"
    },
    {
      "text": "%md\n\napoc.refactor.mergeRelationships([rels],{config})\n\nConfig can have:\n- properties (default: \u0027combine\u0027): Map\u003cprop, type\u003e or type, where type can be discard (to take 1st property value found with the same name), overwrite (to pick last prop value), combine (to join properties in an array)\n- mergeRels (default: false) - only for `apoc.refactor.mergeNodes`\n- singleElementAsArray (default: false)\n",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 12:05:55.823",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636459119756_823886620",
      "id": "paragraph_1636459119756_823886620",
      "dateCreated": "2021-11-09 11:58:39.756",
      "status": "READY"
    },
    {
      "text": "%neo4j\n\nCREATE (n1:MergeOne {name:\u0027Tom\u0027}),\n(n2:MergeOne {name:\u0027John\u0027}),\n(n3:Company {name:\u0027Company1\u0027}),\n(n5:Car {brand:\u0027Ferrari\u0027}),\n(n6:Animal:Cat {name:\u0027Derby\u0027}),\n(n7:City {name:\u0027London\u0027}),\n\n(n1)-[r1:WORKS_FOR {since:2015}]-\u003e(n3),\n(n2)-[r2:WORKS_FOR {since:2018}]-\u003e(n3),\n(n3)-[r3:HAS_HQ {since:2004}]-\u003e(n7),\n(n1)-[r4:DRIVE {since:2017}]-\u003e(n5),\n(n2)-[r5:HAS {since:2013}]-\u003e(n6)\nreturn *;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 13:18:52.580",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 359.545,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "name": "string",
                      "brand": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":1,\"data\":{\"name\":\"Tom\"},\"label\":\"MergeOne\"},{\"id\":22,\"data\":{\"name\":\"John\"},\"label\":\"MergeOne\"},{\"id\":27,\"data\":{\"name\":\"Company1\"},\"label\":\"Company\"},{\"id\":28,\"data\":{\"brand\":\"Ferrari\"},\"label\":\"Car\"},{\"id\":29,\"data\":{\"name\":\"Derby\"},\"label\":\"Animal\"},{\"id\":30,\"data\":{\"name\":\"London\"},\"label\":\"City\"}],\"edges\":[{\"source\":1,\"target\":27,\"id\":0,\"data\":{\"since\":2015},\"label\":\"WORKS_FOR\"},{\"source\":22,\"target\":27,\"id\":1,\"data\":{\"since\":2018},\"label\":\"WORKS_FOR\"},{\"source\":27,\"target\":30,\"id\":19,\"data\":{\"since\":2004},\"label\":\"HAS_HQ\"},{\"source\":1,\"target\":28,\"id\":20,\"data\":{\"since\":2017},\"label\":\"DRIVE\"},{\"source\":22,\"target\":29,\"id\":21,\"data\":{\"since\":2013},\"label\":\"HAS\"}],\"labels\":{\"TTL\":\"#2EC610\",\"NodeWithUnique\":\"#B8C858\",\"Person\":\"#F229BB\",\"Company\":\"#F4C50F\",\"Car\":\"#00123F\",\"Animal\":\"#D0B639\",\"Cat\":\"#6AC79B\",\"City\":\"#56B1BC\",\"MergeOne\":\"#15FFE2\"},\"types\":[\"HAS_HQ\",\"WORKS_FOR\",\"HAS\",\"DRIVE\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636458136545_2109617495",
      "id": "paragraph_1636458136545_2109617495",
      "dateCreated": "2021-11-09 11:42:16.545",
      "dateStarted": "2021-11-09 13:18:52.603",
      "dateFinished": "2021-11-09 13:18:52.642",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nMATCH p\u003d(a1:MergeOne{name:\u0027John\u0027})--(), p2\u003d(a2:MergeOne {name:\u0027Tom\u0027})--()\nWITH [a1,a2] as nodes\nCALL apoc.refactor.mergeNodes(nodes,{properties:\"combine\", mergeRels:true})\nYIELD node RETURN null",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 13:19:48.771",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "network",
              "height": 87.2443,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "name": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "null\nNULL\nNULL\nNULL\nNULL\n"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636458226521_1288066003",
      "id": "paragraph_1636458226521_1288066003",
      "dateCreated": "2021-11-09 11:43:46.521",
      "dateStarted": "2021-11-09 13:18:54.992",
      "dateFinished": "2021-11-09 13:18:55.225",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nMATCH p\u003d(a1:MergeOne)--()\nRETURN p",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 13:20:39.536",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 454.759,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id": "string",
                      "label": "string",
                      "name": "string",
                      "brand": "string",
                      "since": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            },
            "helium": {}
          }
        },
        "editorSetting": {
          "language": "text",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "NETWORK",
            "data": "{\"nodes\":[{\"id\":22,\"data\":{\"name\":[\"John\",\"Tom\"]},\"label\":\"MergeOne\"},{\"id\":27,\"data\":{\"name\":\"Company1\"},\"label\":\"Company\"},{\"id\":28,\"data\":{\"brand\":\"Ferrari\"},\"label\":\"Car\"},{\"id\":29,\"data\":{\"name\":\"Derby\"},\"label\":\"Animal\"}],\"edges\":[{\"source\":22,\"target\":29,\"id\":21,\"data\":{\"since\":2013},\"label\":\"HAS\"},{\"source\":22,\"target\":28,\"id\":22,\"data\":{\"since\":2017},\"label\":\"DRIVE\"},{\"source\":22,\"target\":27,\"id\":23,\"data\":{\"since\":[2015,2018]},\"label\":\"WORKS_FOR\"}],\"labels\":{\"TTL\":\"#2EC610\",\"NodeWithUnique\":\"#B8C858\",\"Person\":\"#F229BB\",\"Company\":\"#F4C50F\",\"Car\":\"#00123F\",\"Animal\":\"#D0B639\",\"Cat\":\"#6AC79B\",\"City\":\"#56B1BC\",\"MergeOne\":\"#15FFE2\"},\"types\":[\"HAS_HQ\",\"WORKS_FOR\",\"HAS\",\"DRIVE\"],\"directed\":true}"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636463994491_1659705378",
      "id": "paragraph_1636463994491_1659705378",
      "dateCreated": "2021-11-09 13:19:54.491",
      "dateStarted": "2021-11-09 13:20:20.553",
      "dateFinished": "2021-11-09 13:20:20.617",
      "status": "FINISHED"
    },
    {
      "text": "%neo4j\n\nCREATE (n1:MergeTwo {name:\u0027Tom\u0027}),\n(n2:MergeTwo {name:\u0027John\u0027}),\n(n3:Company {name:\u0027Company1\u0027}),\n(n5:Car {brand:\u0027Ferrari\u0027}),\n(n6:Animal:Cat {name:\u0027Derby\u0027}),\n(n7:City {name:\u0027London\u0027}),\n\n(n1)-[r1:WORKS_FOR {since:2015}]-\u003e(n3),\n(n2)-[r2:WORKS_FOR {since:2018}]-\u003e(n3),\n(n3)-[r3:HAS_HQ {since:2004}]-\u003e(n7),\n(n1)-[r4:DRIVE {since:2017}]-\u003e(n5),\n(n2)-[r5:HAS {since:2013}]-\u003e(n6)\nreturn *;",
      "user": "anonymous",
      "dateUpdated": "2021-11-09 12:10:56.913",
      "config": {
        "colWidth": 6.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/undefined"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1636458747902_1200537474",
      "id": "paragraph_1636458747902_1200537474",
      "dateCreated": "2021-11-09 11:52:27.902",
      "status": "READY"
    }
  ],
  "name": "8. Refactor data",
  "id": "2GKZNUE99",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}