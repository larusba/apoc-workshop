{
  "paragraphs": [
    {
      "text": "%md\n\n\u003d\u003d SCHEMA operations\n\n\n\nTo drop or create index or constraint, you can use the following procedure:\n\n[separator\u003d¦,opts\u003dheader,cols\u003d\"5,1m,1m\"]\n|\u003d\u003d\u003d\n¦Qualified Name¦Type¦Release\ninclude::example$generated-documentation/apoc.schema.assert.adoc[]\ninclude::example$generated-documentation/apoc.schema.nodes.adoc[]\ninclude::example$generated-documentation/apoc.schema.relationships.adoc[]\ninclude::example$generated-documentation/apoc.schema.node.constraintExists.adoc[]\ninclude::example$generated-documentation/apoc.schema.relationship.constraintExists.adoc[]\ninclude::example$generated-documentation/apoc.schema.node.indexExists.adoc[]\n|\u003d\u003d\u003d\n\n[source,cypher]\n----\nCALL apoc.schema.assert({indexLabel:[[indexKeys]], ...}, {constraintLabel:[constraintKeys], ...}, dropExisting : true)\nYIELD label, key, keys, unique, action\n----\n\nWhere the outputs are:\n\n* label\n* key\n* keys, list of the key\n* unique, if the index or constraint are unique\n* action, can be the following values: DROPPED, CREATED\n\nTo retrieve indexes and constraints information for all the node labels in your database, you can use the following procedure:\n\n[source,cypher]\n----\nCALL apoc.schema.nodes()\nYIELD name, label, properties, status, type\n----\n\nWhere the outputs are:\n\n* name of the index/constraint,\n* label\n* properties, (for Neo4j 3.1 and lower versions is a single element array) that are affected by the constraint\n* status, for index can be one of the following values: ONLINE, POPULATING and FAILED\n* type, always \"INDEX\" for indexes, constraint type for constraints\n* failure, the failure description of a failed index\n* populationProgress, the population progress of the index in percentage\n* size, the size of the index\n* valuesSelectivity, computes the selectivity of the unique values\n* userDescription, a user friendly description of what this index indexes\n\nTo retrieve the constraint information for all the relationship types in your database, you can use the following procedure:\n\n[source,cypher]\n----\nCALL apoc.schema.relationships()\nYIELD name, type, properties, status\n----\n\nWhere the outputs are:\n\n* name of the constraint\n* type of the relationship\n* properties, (for Neo4j 3.1 and lower versions is a single element array) that are affected by the constraint\n* status\n\nConfig optional param is a map and its possible values are:\n\n* labels : list of labels to retrieve index/constraint information\n* excludeLabels: list of labels to exclude from retrieve index/constraint information\n* relationships: list of relationships type to retrieve constraint information\n* excludeRelationships: list of relationships\u0027 type to exclude from retrieve constraint information\n\n**Exclude has more power than include, so if excludeLabels and labels are both valued, procedure considers excludeLabels only, the same for relationships.**\n\n[source,cypher]\n----\nCALL apoc.schema.nodes({labels:[\u0027Book\u0027]})\nYIELD name, label, properties, status, type\n----\n\n\nN.B. Constraints for property existence on nodes and relationships are available only for the Enterprise Edition.\n\nTo retrieve the index existence on node, you can use the following user function:\n\n[source,cypher]\n----\nRETURN apoc.schema.node.indexExists(labelName, propertyNames)\n\n----\n\nThe output return the index existence on node is present or not\n\nTo retrieve if the constraint exists on node, you can use the following user function:\n\n[source,cypher]\n----\nRETURN apoc.schema.node.constraintExists(labelName, propertyNames)\n----\n\nThe output return the constraint existence on node.\n\nTo retrieve if the constraint exists on relationship, you can use the following user function:\n\n[source,cypher]\n----\nRETURN apoc.schema.relationship.constraintExists(type, propertyNames)\n----\n\nThe output return the constraint on the relationship is present or not\n\n\n\u003d\u003d\u003d Examples\n\n\u003d\u003d\u003d List Schema assert\n\nWhen you:\n\n[source,cypher]\n----\nCALL apoc.schema.assert({Foo:[\u0027bar\u0027]},null)\n----\n\nyou will receive this result:\n\nimage::apoc.schema.assert.index.png[scaledwidth\u003d\"100%\"]\n\nWhen you:\n\n[source,cypher]\n----\nCALL apoc.schema.assert(null,{Foo:[\u0027bar\u0027]})\n----\n\nyou will receive this result:\n\nimage::apoc.schema.assert.constraint.png[scaledwidth\u003d\"100%\"]\n\nWhen you:\n\n[source,cypher]\n----\nCALL apoc.schema.assert(null,null)\n----\n\nyou will receive this result:\n\nimage::apoc.schema.assert.drop.png[scaledwidth\u003d\"100%\"]\n\n\n\u003d\u003d\u003d List indexes and constraints for nodes\n\nGiven the following cypher statements:\n\n[source,cypher]\n----\nCREATE CONSTRAINT ON (bar:Bar) ASSERT exists(bar.foobar)\nCREATE CONSTRAINT ON (bar:Bar) ASSERT bar.foo IS UNIQUE\nCREATE INDEX ON :Person(name)\nCREATE INDEX ON :Publication(name)\nCREATE INDEX ON :Source(name)\n----\n\nWhen you\n\n[source,cypher]\n----\nCALL apoc.schema.nodes()\n----\n\n\nyou will receive this result:\n\nimage::apoc.schema.nodes.png[scaledwidth\u003d\"100%\"]\n\n\u003d\u003d\u003d List constraints for relationships\n\nGiven the following cypher statements:\n\n[source,cypher]\n----\nCREATE CONSTRAINT ON ()-[like:LIKED]-() ASSERT exists(like.day)\nCREATE CONSTRAINT ON ()-[starred:STARRED]-() ASSERT exists(starred.month)\n----\n\nWhen you\n\n[source,cypher]\n----\nCALL apoc.schema.relationships()\n----\n\nyou will receive this result:\n\nimage::apoc.schema.relationships.png[scaledwidth\u003d\"100%\"]\n\n\u003d\u003d\u003d Check if an index or a constraint exists for a Label and property\n\nGiven the previous index definitions, running this statement:\n\n[source,cypher]\n----\nRETURN apoc.schema.node.indexExists(\"Publication\", [\"name\"])\n----\nproduces the following output:\n\nimage::apoc.schema.node.indexExists.png[scaledwidth\u003d\"100%\"]\n\n\nGiven the previous constraint definitions, running this statement:\n\n[source,cypher]\n----\nRETURN apoc.schema.node.constraintExists(\"Bar\", [\"foobar\"])\n----\nproduces the following output:\n\nimage::apoc.schema.node.constraintExists.png[scaledwidth\u003d\"100%\"]\n\nIf you want to check if a constraint exists for a relationship you can run this statement:\n\n[source,cypher]\n----\nRETURN apoc.schema.relationship.constraintExists(\u0027LIKED\u0027, [\u0027day\u0027])\n----\n\nand you get the following result:\n\nimage::apoc.schema.relationship.constraintExists.png[scaledwidth\u003d\"100%\"]\n\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 15:54:20.281",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003e\u003d\u003d SCHEMA operations\u003c/p\u003e\n\u003cp\u003eTo drop or create index or constraint, you can use the following procedure:\u003c/p\u003e\n\u003cp\u003e[separator\u003d¦,opts\u003dheader,cols\u003d\u0026ldquo;5,1m,1m\u0026rdquo;]\u003cbr /\u003e\n|\u003d\u003d\u003d\u003cbr /\u003e\n¦Qualified Name¦Type¦Release\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.schema.assert.adoc[]\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.schema.nodes.adoc[]\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.schema.relationships.adoc[]\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.schema.node.constraintExists.adoc[]\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.schema.relationship.constraintExists.adoc[]\u003cbr /\u003e\ninclude::example$generated-documentation/apoc.schema.node.indexExists.adoc[]\u003cbr /\u003e\n|\u003d\u003d\u003d\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.assert({indexLabel:\u003ca href\u003d\"indexKeys\"\u003eindexKeys\u003c/a\u003e, \u0026hellip;}, {constraintLabel:[constraintKeys], \u0026hellip;}, dropExisting : true)\u003cbr /\u003e\nYIELD label, key, keys, unique, action\u003c/h2\u003e\n\u003cp\u003eWhere the outputs are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elabel\u003c/li\u003e\n\u003cli\u003ekey\u003c/li\u003e\n\u003cli\u003ekeys, list of the key\u003c/li\u003e\n\u003cli\u003eunique, if the index or constraint are unique\u003c/li\u003e\n\u003cli\u003eaction, can be the following values: DROPPED, CREATED\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo retrieve indexes and constraints information for all the node labels in your database, you can use the following procedure:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.nodes()\u003cbr /\u003e\nYIELD name, label, properties, status, type\u003c/h2\u003e\n\u003cp\u003eWhere the outputs are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ename of the index/constraint,\u003c/li\u003e\n\u003cli\u003elabel\u003c/li\u003e\n\u003cli\u003eproperties, (for Neo4j 3.1 and lower versions is a single element array) that are affected by the constraint\u003c/li\u003e\n\u003cli\u003estatus, for index can be one of the following values: ONLINE, POPULATING and FAILED\u003c/li\u003e\n\u003cli\u003etype, always \u0026ldquo;INDEX\u0026rdquo; for indexes, constraint type for constraints\u003c/li\u003e\n\u003cli\u003efailure, the failure description of a failed index\u003c/li\u003e\n\u003cli\u003epopulationProgress, the population progress of the index in percentage\u003c/li\u003e\n\u003cli\u003esize, the size of the index\u003c/li\u003e\n\u003cli\u003evaluesSelectivity, computes the selectivity of the unique values\u003c/li\u003e\n\u003cli\u003euserDescription, a user friendly description of what this index indexes\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eTo retrieve the constraint information for all the relationship types in your database, you can use the following procedure:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.relationships()\u003cbr /\u003e\nYIELD name, type, properties, status\u003c/h2\u003e\n\u003cp\u003eWhere the outputs are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ename of the constraint\u003c/li\u003e\n\u003cli\u003etype of the relationship\u003c/li\u003e\n\u003cli\u003eproperties, (for Neo4j 3.1 and lower versions is a single element array) that are affected by the constraint\u003c/li\u003e\n\u003cli\u003estatus\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eConfig optional param is a map and its possible values are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003elabels : list of labels to retrieve index/constraint information\u003c/li\u003e\n\u003cli\u003eexcludeLabels: list of labels to exclude from retrieve index/constraint information\u003c/li\u003e\n\u003cli\u003erelationships: list of relationships type to retrieve constraint information\u003c/li\u003e\n\u003cli\u003eexcludeRelationships: list of relationships\u0026rsquo; type to exclude from retrieve constraint information\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExclude has more power than include, so if excludeLabels and labels are both valued, procedure considers excludeLabels only, the same for relationships.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.nodes({labels:[\u0026lsquo;Book\u0026rsquo;]})\u003cbr /\u003e\nYIELD name, label, properties, status, type\u003c/h2\u003e\n\u003cp\u003eN.B. Constraints for property existence on nodes and relationships are available only for the Enterprise Edition.\u003c/p\u003e\n\u003cp\u003eTo retrieve the index existence on node, you can use the following user function:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003cp\u003eRETURN apoc.schema.node.indexExists(labelName, propertyNames)\u003c/p\u003e\n\u003chr /\u003e\n\u003cp\u003eThe output return the index existence on node is present or not\u003c/p\u003e\n\u003cp\u003eTo retrieve if the constraint exists on node, you can use the following user function:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eRETURN apoc.schema.node.constraintExists(labelName, propertyNames)\u003c/h2\u003e\n\u003cp\u003eThe output return the constraint existence on node.\u003c/p\u003e\n\u003cp\u003eTo retrieve if the constraint exists on relationship, you can use the following user function:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eRETURN apoc.schema.relationship.constraintExists(type, propertyNames)\u003c/h2\u003e\n\u003cp\u003eThe output return the constraint on the relationship is present or not\u003c/p\u003e\n\u003cp\u003e\u003d\u003d\u003d Examples\u003c/p\u003e\n\u003cp\u003e\u003d\u003d\u003d List Schema assert\u003c/p\u003e\n\u003cp\u003eWhen you:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.assert({Foo:[\u0026lsquo;bar\u0026rsquo;]},null)\u003c/h2\u003e\n\u003cp\u003eyou will receive this result:\u003c/p\u003e\n\u003cp\u003eimage::apoc.schema.assert.index.png[scaledwidth\u003d\u0026ldquo;100%\u0026rdquo;]\u003c/p\u003e\n\u003cp\u003eWhen you:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.assert(null,{Foo:[\u0026lsquo;bar\u0026rsquo;]})\u003c/h2\u003e\n\u003cp\u003eyou will receive this result:\u003c/p\u003e\n\u003cp\u003eimage::apoc.schema.assert.constraint.png[scaledwidth\u003d\u0026ldquo;100%\u0026rdquo;]\u003c/p\u003e\n\u003cp\u003eWhen you:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.assert(null,null)\u003c/h2\u003e\n\u003cp\u003eyou will receive this result:\u003c/p\u003e\n\u003cp\u003eimage::apoc.schema.assert.drop.png[scaledwidth\u003d\u0026ldquo;100%\u0026rdquo;]\u003c/p\u003e\n\u003cp\u003e\u003d\u003d\u003d List indexes and constraints for nodes\u003c/p\u003e\n\u003cp\u003eGiven the following cypher statements:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCREATE CONSTRAINT ON (bar:Bar) ASSERT exists(bar.foobar)\u003cbr /\u003e\nCREATE CONSTRAINT ON (bar:Bar) ASSERT bar.foo IS UNIQUE\u003cbr /\u003e\nCREATE INDEX ON :Person(name)\u003cbr /\u003e\nCREATE INDEX ON :Publication(name)\u003cbr /\u003e\nCREATE INDEX ON :Source(name)\u003c/h2\u003e\n\u003cp\u003eWhen you\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.nodes()\u003c/h2\u003e\n\u003cp\u003eyou will receive this result:\u003c/p\u003e\n\u003cp\u003eimage::apoc.schema.nodes.png[scaledwidth\u003d\u0026ldquo;100%\u0026rdquo;]\u003c/p\u003e\n\u003cp\u003e\u003d\u003d\u003d List constraints for relationships\u003c/p\u003e\n\u003cp\u003eGiven the following cypher statements:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCREATE CONSTRAINT ON ()-[like:LIKED]-() ASSERT exists(like.day)\u003cbr /\u003e\nCREATE CONSTRAINT ON ()-[starred:STARRED]-() ASSERT exists(starred.month)\u003c/h2\u003e\n\u003cp\u003eWhen you\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eCALL apoc.schema.relationships()\u003c/h2\u003e\n\u003cp\u003eyou will receive this result:\u003c/p\u003e\n\u003cp\u003eimage::apoc.schema.relationships.png[scaledwidth\u003d\u0026ldquo;100%\u0026rdquo;]\u003c/p\u003e\n\u003cp\u003e\u003d\u003d\u003d Check if an index or a constraint exists for a Label and property\u003c/p\u003e\n\u003cp\u003eGiven the previous index definitions, running this statement:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eRETURN apoc.schema.node.indexExists(\u0026ldquo;Publication\u0026rdquo;, [\u0026ldquo;name\u0026rdquo;])\u003c/h2\u003e\n\u003cp\u003eproduces the following output:\u003c/p\u003e\n\u003cp\u003eimage::apoc.schema.node.indexExists.png[scaledwidth\u003d\u0026ldquo;100%\u0026rdquo;]\u003c/p\u003e\n\u003cp\u003eGiven the previous constraint definitions, running this statement:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eRETURN apoc.schema.node.constraintExists(\u0026ldquo;Bar\u0026rdquo;, [\u0026ldquo;foobar\u0026rdquo;])\u003c/h2\u003e\n\u003cp\u003eproduces the following output:\u003c/p\u003e\n\u003cp\u003eimage::apoc.schema.node.constraintExists.png[scaledwidth\u003d\u0026ldquo;100%\u0026rdquo;]\u003c/p\u003e\n\u003cp\u003eIf you want to check if a constraint exists for a relationship you can run this statement:\u003c/p\u003e\n\u003ch2\u003e[source,cypher]\u003c/h2\u003e\n\u003ch2\u003eRETURN apoc.schema.relationship.constraintExists(\u0026lsquo;LIKED\u0026rsquo;, [\u0026lsquo;day\u0026rsquo;])\u003c/h2\u003e\n\u003cp\u003eand you get the following result:\u003c/p\u003e\n\u003cp\u003eimage::apoc.schema.relationship.constraintExists.png[scaledwidth\u003d\u0026ldquo;100%\u0026rdquo;]\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349315160_1325677210",
      "id": "paragraph_1635349315160_1325677210",
      "dateCreated": "2021-10-27 15:41:55.160",
      "dateStarted": "2021-10-28 15:53:14.336",
      "dateFinished": "2021-10-28 15:53:14.388",
      "status": "FINISHED"
    },
    {
      "user": "anonymous",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635349321839_926884581",
      "id": "paragraph_1635349321839_926884581",
      "dateCreated": "2021-10-27 15:42:01.839",
      "status": "READY"
    }
  ],
  "name": "Schema",
  "id": "2GNC5HTWK",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}