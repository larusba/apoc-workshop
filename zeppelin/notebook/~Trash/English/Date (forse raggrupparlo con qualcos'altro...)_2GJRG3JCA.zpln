{
  "paragraphs": [
    {
      "text": "%md\n\n# DATE CONVERSION: APOC Date \u0026 Time Conversion\n\nNeo4j supports date and temporal values, but often, we are dealing with differing date formats between systems or files. These can be difficult to express and translate without a few flexible procedures to handle converting one value formatting to another.\n\nAPOC has several procedures for converting and formatting various date, time, and temporal values. They save valuable time in manually converting values or creating a procedure from scratch! The full list of available procedures is in the APOC documentation.",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 08:23:32.921",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch1\u003eDATE CONVERSION: APOC Date \u0026amp; Time Conversion\u003c/h1\u003e\n\u003cp\u003eNeo4j supports date and temporal values, but often, we are dealing with differing date formats between systems or files. These can be difficult to express and translate without a few flexible procedures to handle converting one value formatting to another.\u003c/p\u003e\n\u003cp\u003eAPOC has several procedures for converting and formatting various date, time, and temporal values. They save valuable time in manually converting values or creating a procedure from scratch! The full list of available procedures is in the APOC documentation.\u003c/p\u003e\n\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347299032_495126717",
      "id": "paragraph_1635347299032_495126717",
      "dateCreated": "2021-10-27 15:08:19.032",
      "dateStarted": "2021-10-27 15:09:09.232",
      "dateFinished": "2021-10-27 15:09:11.063",
      "status": "FINISHED"
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:12:50.731",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347570731_73166586",
      "id": "paragraph_1635347570731_73166586",
      "dateCreated": "2021-10-27 15:12:50.731",
      "status": "READY"
    },
    {
      "text": "%md\n\n## Converting dates from Integer to String\n\nThe APOC apoc.date.format() takes an integer value for the date and converts it to a string in the desired format, including a custom one. This is commonly used when translating data from APIs, flat files, or even other databases and moving that data into or out of Neo4j.\n\nFormat: apoc.date.format(12345, [\u0027ms\u0027/\u0027s\u0027], [\u0027yyyy/MM/dd HH:mm:ss\u0027])\n\nThis procedure has 3 parameters -\n\n    the date integer value to convert\n\n    how specific the first parameter is (s for seconds, ms for milliseconds)\n\n    how we want the date string result to look",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:12:48.469",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347349224_61501621",
      "id": "paragraph_1635347349224_61501621",
      "dateCreated": "2021-10-27 15:09:09.224",
      "status": "READY"
    },
    {
      "text": "%md\n\n## apoc.date.format Example:\n\nOur Northwind data has Customer nodes who hopefully make orders with our business. We probably want to record timestamps when the first contact was sent to the business to see which customers were initially contacted in certain months and which probably made sales in the same year.\n\n[source,cypher]\n----\nWITH 841914000 as dateInt //1996-09-05 09:00 in epoch seconds\nCREATE (c:Customer {companyName: \u0027Island Trading\u0027})\nSET c.firstContact \u003d apoc.date.format(dateInt, \u0027s\u0027, \u0027yyyy-MM-dd HH:mm:ss\u0027)\nRETURN c",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:13:07.562",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347572997_2110770397",
      "id": "paragraph_1635347572997_2110770397",
      "dateCreated": "2021-10-27 15:12:52.998",
      "status": "READY"
    },
    {
      "text": "%md\n\nIn the example above, we have a date integer in seconds, and we want to update our customer information with that datetime in a human-readable format. To do that, we merge the Customer node and set the firstContact property equal to the converted date (using the procedure).\n\nIn the return, we should see the customerâ€™s node with all its properties and the formatted date!",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:13:19.655",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347588380_42450979",
      "id": "paragraph_1635347588380_42450979",
      "dateCreated": "2021-10-27 15:13:08.380",
      "status": "READY"
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-28 08:23:59.569",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635409439569_1740893490",
      "id": "paragraph_1635409439569_1740893490",
      "dateCreated": "2021-10-28 08:23:59.569",
      "status": "READY"
    },
    {
      "text": "%md\n\n## Converting dates from String to Integer\n\nLet us do the reverse of what we just did on the previous slide by converting a string value to an integer with apoc.date.parse(). This is helpful for comparing date strings from and to various formats, most commonly in data import or export.\n\nFormat: apoc.date.parse(\u00272019/03/25 03:15:59\u0027, [\u0027ms\u0027/\u0027s\u0027], [\u0027yyyy/MM/dd HH:mm:ss\u0027])\n\nThe procedure needs 3 parameters -\n\n    the date string that needs converted\n\n    how specific the conversion should be (down to seconds s or milliseconds ms)\n\n    what the format is of the date string (1st parameter)",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:13:40.489",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347601307_2070077600",
      "id": "paragraph_1635347601307_2070077600",
      "dateCreated": "2021-10-27 15:13:21.307",
      "status": "READY"
    },
    {
      "text": "%md\n## apoc.date.parse Example:\n\nLet us say that we received a notification from our monitoring system that there was an error in the system at timestamp 882230400, so we need to find out which orders were possibly affected by the error. We can use apoc.date.parse() to convert the string-formatted date in our Northwind data to a timestamp and compare that to the timestamp we have from our error system.\n\nWITH 882230400 as errorTimestamp //1997-12-16 00:00:00.000 in epoch seconds\nMATCH (o:Order)\nWHERE apoc.date.parse(o.orderDate, \u0027s\u0027, \u0027yyyy-MM-dd HH:mm:ss.SSS\u0027) \u003d errorTimestamp\nRETURN o\n\nIn our example, we are given a date integer (epoch time from the error in monitoring system) and want to find the orders that were made on that date. We use MATCH to search for Order nodes where the converted orderDate property (using the procedure) matches the date integer of the error and return the orders that are found.\n\nIn the return, we should see 3 orders that have an order date of 1997-12-16!",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:13:56.455",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347621647_1592239206",
      "id": "paragraph_1635347621647_1592239206",
      "dateCreated": "2021-10-27 15:13:41.648",
      "status": "READY"
    },
    {
      "text": "%md\n\u003d\u003d Adding or subtracting units from timestamps\n\nThe marketing department might want to see how well a marketing campaign did to generate sales. The campaign was published at timestamp 891388800, and we need to find out how many sales it generated within the first 30 days running.\n\nWe can use apoc.date.add() to take a point in time of epoch milliseconds (integer) and add or subtract a specified time value to find the desired timestamp.\n\nFormat: apoc.date.add(12345, \u0027ms\u0027, -365, \u0027d\u0027)\n\nThe procedure above contains 4 parameters -\n\n    the date integer for adding or subtracting\n\n    how specific the date integer is (s for seconds, ms for milliseconds)\n\n    the number to add or subtract from the date integer\n\n    the unit type to add or subtract\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:14:16.875",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347639468_204302056",
      "id": "paragraph_1635347639468_204302056",
      "dateCreated": "2021-10-27 15:13:59.468",
      "status": "READY"
    },
    {
      "text": "%md\n\u003d\u003d apoc.date.add Example:\n\nWITH 891388800 as startDate\nWITH startDate, apoc.date.add(startDate, \u0027s\u0027, 30, \u0027d\u0027) as endDate\nMATCH (o:Order)\nWHERE startDate \u003c apoc.date.parse(o.orderDate,\u0027s\u0027,\u0027yyyy-MM-dd HH:mm:ss.SSS\u0027) \u003c endDate\nRETURN count(o)\n\nIn our query above, we first set the campaign start timestamp as a variable and then pass that to the next line, where we also use that startDate to calculate our end date (using the procedure). The apoc.date.add calculates it by adding 30 days (the 30 and d parameters) to the start date and setting that as our endDate. We then search for Order nodes where the orderDate (converted from string to integer using apoc.date.parse()) is greater than the start date of the campaign and less than the end date.\n\nIn the return, we should see the number of orders made within 30 days of the campaign publish - a total of 70!",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:14:27.798",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347657734_1179740617",
      "id": "paragraph_1635347657734_1179740617",
      "dateCreated": "2021-10-27 15:14:17.734",
      "status": "READY"
    },
    {
      "text": "%md\n\u003d\u003d Converting date string to temporal type\n\nSo far, we have worked with order dates as strings with a particular format. However, Neo4j supports date and time types, so it would probably make things much easier if we converted to the native types.\n\nThere is an APOC procedure to convert the format from a string to a temporal type. Since Neo4j is compatible with the ISO 8601 standard, we will use that for our result format.\n\nFormat: apoc.date.convertFormat(\u00272019-12-31 16:14:20\u0027, \u0027yyyy-MM-dd HH:mm:ss\u0027, \u0027iso_date_format\u0027)\n\nThe procedure contains 3 parameters -\n\n    the date string that needs converted\n\n    what the format is of the date string\n\n    the format for the resulting temporal type (can be specified manually, as Java formats, or as these built-in formats)\n\n\u003d\u003d\napoc.date.convertFormat Example:\n\nMATCH (o:Order)\nSET o.isoOrderDate \u003d apoc.date.convertFormat(o.orderDate, \u0027yyyy-MM-dd HH:mm:ss.SSS\u0027, \u0027iso_date_time\u0027)\nRETURN o\n\nIn the query above, we find all the orders in our system and set a new property called isoOrderDate that is equal to the converted orderDate string. The orderDate is converted using the procedure, specifying the string format it is currently in and the iso_date_time format (2019-01-01T00:00:00) we want to have as the result.\n\nResults of the query should return a sample (Browser will limit how much JavaScript has to render) of the orders we updated. Clicking on one shows all the properties on that node, including the new isoOrderDate property that is formatted as we expected!\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:14:38.945",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347667868_457804276",
      "id": "paragraph_1635347667868_457804276",
      "dateCreated": "2021-10-27 15:14:27.868",
      "status": "READY"
    },
    {
      "text": "%md\n\n\u003d\u003d example\nhttps://neo4j.com/developer/kb/neo4j-string-to-date/\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:14:50.168",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347682391_1151395828",
      "id": "paragraph_1635347682391_1151395828",
      "dateCreated": "2021-10-27 15:14:42.391",
      "status": "READY"
    },
    {
      "text": "%md\n",
      "user": "anonymous",
      "dateUpdated": "2021-10-27 15:14:50.246",
      "config": {},
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "runtimeInfos": {},
      "progressUpdateIntervalMs": 500,
      "jobName": "paragraph_1635347690246_1893036458",
      "id": "paragraph_1635347690246_1893036458",
      "dateCreated": "2021-10-27 15:14:50.246",
      "status": "READY"
    }
  ],
  "name": "Date (forse raggrupparlo con qualcos\u0027altro...)",
  "id": "2GJRG3JCA",
  "defaultInterpreterGroup": "spark",
  "version": "0.9.0-preview2",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {},
  "config": {
    "isZeppelinNotebookCronEnable": false
  },
  "info": {}
}